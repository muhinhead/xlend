// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Mon Jan 19 11:03:09 EET 2015
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xemployeepenalty extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xemployeepenaltyId = null;
    private Integer points = null;
    private Integer xemployeeId = null;
    private Integer year = null;
    private Integer xincidentsId = null;
    private Integer decreasedBy = null;
    private Date decreasedAt = null;
    private String notes = null;

    public Xemployeepenalty(Connection connection) {
        super(connection, "xemployeepenalty", "xemployeepenalty_id");
        setColumnNames(new String[]{"xemployeepenalty_id", "points", "xemployee_id", "year", "xincidents_id", "decreased_by", "decreased_at", "notes"});
    }

    public Xemployeepenalty(Connection connection, Integer xemployeepenaltyId, Integer points, Integer xemployeeId, Integer year, Integer xincidentsId, Integer decreasedBy, Date decreasedAt, String notes) {
        super(connection, "xemployeepenalty", "xemployeepenalty_id");
        setNew(xemployeepenaltyId.intValue() <= 0);
//        if (xemployeepenaltyId.intValue() != 0) {
            this.xemployeepenaltyId = xemployeepenaltyId;
//        }
        this.points = points;
        this.xemployeeId = xemployeeId;
        this.year = year;
        this.xincidentsId = xincidentsId;
        this.decreasedBy = decreasedBy;
        this.decreasedAt = decreasedAt;
        this.notes = notes;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xemployeepenalty xemployeepenalty = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployeepenalty_id,points,xemployee_id,year,xincidents_id,decreased_by,decreased_at,notes FROM xemployeepenalty WHERE xemployeepenalty_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xemployeepenalty = new Xemployeepenalty(getConnection());
                xemployeepenalty.setXemployeepenaltyId(new Integer(rs.getInt(1)));
                xemployeepenalty.setPoints(new Integer(rs.getInt(2)));
                xemployeepenalty.setXemployeeId(new Integer(rs.getInt(3)));
                xemployeepenalty.setYear(new Integer(rs.getInt(4)));
                xemployeepenalty.setXincidentsId(new Integer(rs.getInt(5)));
                xemployeepenalty.setDecreasedBy(new Integer(rs.getInt(6)));
                xemployeepenalty.setDecreasedAt(rs.getDate(7));
                xemployeepenalty.setNotes(rs.getString(8));
                xemployeepenalty.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xemployeepenalty;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xemployeepenalty ("+(getXemployeepenaltyId().intValue()!=0?"xemployeepenalty_id,":"")+"points,xemployee_id,year,xincidents_id,decreased_by,decreased_at,notes) values("+(getXemployeepenaltyId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXemployeepenaltyId().intValue()!=0) {
                 ps.setObject(++n, getXemployeepenaltyId());
             }
             ps.setObject(++n, getPoints());
             ps.setObject(++n, getXemployeeId());
             ps.setObject(++n, getYear());
             ps.setObject(++n, getXincidentsId());
             ps.setObject(++n, getDecreasedBy());
             ps.setObject(++n, getDecreasedAt());
             ps.setObject(++n, getNotes());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXemployeepenaltyId().intValue()==0) {
             stmt = "SELECT max(xemployeepenalty_id) FROM xemployeepenalty";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXemployeepenaltyId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xemployeepenalty " +
                    "SET points = ?, xemployee_id = ?, year = ?, xincidents_id = ?, decreased_by = ?, decreased_at = ?, notes = ?" + 
                    " WHERE xemployeepenalty_id = " + getXemployeepenaltyId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getPoints());
                ps.setObject(2, getXemployeeId());
                ps.setObject(3, getYear());
                ps.setObject(4, getXincidentsId());
                ps.setObject(5, getDecreasedBy());
                ps.setObject(6, getDecreasedAt());
                ps.setObject(7, getNotes());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xemployeepenalty " +
                "WHERE xemployeepenalty_id = " + getXemployeepenaltyId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXemployeepenaltyId(new Integer(-getXemployeepenaltyId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXemployeepenaltyId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployeepenalty_id,points,xemployee_id,year,xincidents_id,decreased_by,decreased_at,notes FROM xemployeepenalty " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xemployeepenalty(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3)),new Integer(rs.getInt(4)),new Integer(rs.getInt(5)),new Integer(rs.getInt(6)),rs.getDate(7),rs.getString(8)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xemployeepenalty[] objects = new Xemployeepenalty[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xemployeepenalty xemployeepenalty = (Xemployeepenalty) lst.get(i);
            objects[i] = xemployeepenalty;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployeepenalty_id FROM xemployeepenalty " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXemployeepenaltyId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xemployeepenaltyId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXemployeepenaltyId(id);
        setNew(prevIsNew);
    }

    public Integer getXemployeepenaltyId() {
        return xemployeepenaltyId;
    }

    public void setXemployeepenaltyId(Integer xemployeepenaltyId) throws ForeignKeyViolationException {
        setWasChanged(this.xemployeepenaltyId != null && this.xemployeepenaltyId != xemployeepenaltyId);
        this.xemployeepenaltyId = xemployeepenaltyId;
        setNew(xemployeepenaltyId.intValue() == 0);
    }

    public Integer getPoints() {
        return points;
    }

    public void setPoints(Integer points) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.points != null && !this.points.equals(points));
        this.points = points;
    }

    public Integer getXemployeeId() {
        return xemployeeId;
    }

    public void setXemployeeId(Integer xemployeeId) throws SQLException, ForeignKeyViolationException {
        if (xemployeeId!=null && !Xemployee.exists(getConnection(),"xemployee_id = " + xemployeeId)) {
            throw new ForeignKeyViolationException("Can't set xemployee_id, foreign key violation: xemployeepenalty_xemployee_fk");
        }
        setWasChanged(this.xemployeeId != null && !this.xemployeeId.equals(xemployeeId));
        this.xemployeeId = xemployeeId;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.year != null && !this.year.equals(year));
        this.year = year;
    }

    public Integer getXincidentsId() {
        return xincidentsId;
    }

    public void setXincidentsId(Integer xincidentsId) throws SQLException, ForeignKeyViolationException {
        if (null != xincidentsId)
            xincidentsId = xincidentsId == 0 ? null : xincidentsId;
        if (xincidentsId!=null && !Xincidents.exists(getConnection(),"xincidents_id = " + xincidentsId)) {
            throw new ForeignKeyViolationException("Can't set xincidents_id, foreign key violation: xemployeepenalty_xincidents_fk");
        }
        setWasChanged(this.xincidentsId != null && !this.xincidentsId.equals(xincidentsId));
        this.xincidentsId = xincidentsId;
    }

    public Integer getDecreasedBy() {
        return decreasedBy;
    }

    public void setDecreasedBy(Integer decreasedBy) throws SQLException, ForeignKeyViolationException {
        if (decreasedBy!=null && !Xemployee.exists(getConnection(),"xemployee_id = " + decreasedBy)) {
            throw new ForeignKeyViolationException("Can't set decreased_by, foreign key violation: xemployeepenalty_xemployee_fk2");
        }
        setWasChanged(this.decreasedBy != null && !this.decreasedBy.equals(decreasedBy));
        this.decreasedBy = decreasedBy;
    }

    public Date getDecreasedAt() {
        return decreasedAt;
    }

    public void setDecreasedAt(Date decreasedAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.decreasedAt != null && !this.decreasedAt.equals(decreasedAt));
        this.decreasedAt = decreasedAt;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.notes != null && !this.notes.equals(notes));
        this.notes = notes;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[8];
        columnValues[0] = getXemployeepenaltyId();
        columnValues[1] = getPoints();
        columnValues[2] = getXemployeeId();
        columnValues[3] = getYear();
        columnValues[4] = getXincidentsId();
        columnValues[5] = getDecreasedBy();
        columnValues[6] = getDecreasedAt();
        columnValues[7] = getNotes();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXemployeepenaltyId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXemployeepenaltyId(null);
        }
        try {
            setPoints(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setPoints(null);
        }
        try {
            setXemployeeId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setXemployeeId(null);
        }
        try {
            setYear(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setYear(null);
        }
        try {
            setXincidentsId(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setXincidentsId(null);
        }
        try {
            setDecreasedBy(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setDecreasedBy(null);
        }
        setDecreasedAt(toDate(flds[6]));
        setNotes(flds[7]);
    }
}
