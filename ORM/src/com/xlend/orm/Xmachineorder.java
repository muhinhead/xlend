// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Aug 30 12:06:05 EEST 2014
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xmachineorder extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xmachineorderId = null;
    private Date issueDate = null;
    private Date requireDate = null;
    private Integer xemployeeId = null;
    private Integer xsiteId = null;
    private Integer xclientId = null;
    private Integer xorderId = null;
    private String siteAddress = null;
    private Integer distance2site = null;
    private String foremanReqPlant = null;
    private String foremanContact = null;

    public Xmachineorder(Connection connection) {
        super(connection, "xmachineorder", "xmachineorder_id");
        setColumnNames(new String[]{"xmachineorder_id", "issue_date", "require_date", "xemployee_id", "xsite_id", "xclient_id", "xorder_id", "site_address", "distance2site", "foreman_req_plant", "foreman_contact"});
    }

    public Xmachineorder(Connection connection, Integer xmachineorderId, Date issueDate, Date requireDate, Integer xemployeeId, Integer xsiteId, Integer xclientId, Integer xorderId, String siteAddress, Integer distance2site, String foremanReqPlant, String foremanContact) {
        super(connection, "xmachineorder", "xmachineorder_id");
        setNew(xmachineorderId.intValue() <= 0);
//        if (xmachineorderId.intValue() != 0) {
            this.xmachineorderId = xmachineorderId;
//        }
        this.issueDate = issueDate;
        this.requireDate = requireDate;
        this.xemployeeId = xemployeeId;
        this.xsiteId = xsiteId;
        this.xclientId = xclientId;
        this.xorderId = xorderId;
        this.siteAddress = siteAddress;
        this.distance2site = distance2site;
        this.foremanReqPlant = foremanReqPlant;
        this.foremanContact = foremanContact;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xmachineorder xmachineorder = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachineorder_id,issue_date,require_date,xemployee_id,xsite_id,xclient_id,xorder_id,site_address,distance2site,foreman_req_plant,foreman_contact FROM xmachineorder WHERE xmachineorder_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xmachineorder = new Xmachineorder(getConnection());
                xmachineorder.setXmachineorderId(new Integer(rs.getInt(1)));
                xmachineorder.setIssueDate(rs.getDate(2));
                xmachineorder.setRequireDate(rs.getDate(3));
                xmachineorder.setXemployeeId(new Integer(rs.getInt(4)));
                xmachineorder.setXsiteId(new Integer(rs.getInt(5)));
                xmachineorder.setXclientId(new Integer(rs.getInt(6)));
                xmachineorder.setXorderId(new Integer(rs.getInt(7)));
                xmachineorder.setSiteAddress(rs.getString(8));
                xmachineorder.setDistance2site(new Integer(rs.getInt(9)));
                xmachineorder.setForemanReqPlant(rs.getString(10));
                xmachineorder.setForemanContact(rs.getString(11));
                xmachineorder.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xmachineorder;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xmachineorder ("+(getXmachineorderId().intValue()!=0?"xmachineorder_id,":"")+"issue_date,require_date,xemployee_id,xsite_id,xclient_id,xorder_id,site_address,distance2site,foreman_req_plant,foreman_contact) values("+(getXmachineorderId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXmachineorderId().intValue()!=0) {
                 ps.setObject(++n, getXmachineorderId());
             }
             ps.setObject(++n, getIssueDate());
             ps.setObject(++n, getRequireDate());
             ps.setObject(++n, getXemployeeId());
             ps.setObject(++n, getXsiteId());
             ps.setObject(++n, getXclientId());
             ps.setObject(++n, getXorderId());
             ps.setObject(++n, getSiteAddress());
             ps.setObject(++n, getDistance2site());
             ps.setObject(++n, getForemanReqPlant());
             ps.setObject(++n, getForemanContact());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXmachineorderId().intValue()==0) {
             stmt = "SELECT max(xmachineorder_id) FROM xmachineorder";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXmachineorderId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xmachineorder " +
                    "SET issue_date = ?, require_date = ?, xemployee_id = ?, xsite_id = ?, xclient_id = ?, xorder_id = ?, site_address = ?, distance2site = ?, foreman_req_plant = ?, foreman_contact = ?" + 
                    " WHERE xmachineorder_id = " + getXmachineorderId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getIssueDate());
                ps.setObject(2, getRequireDate());
                ps.setObject(3, getXemployeeId());
                ps.setObject(4, getXsiteId());
                ps.setObject(5, getXclientId());
                ps.setObject(6, getXorderId());
                ps.setObject(7, getSiteAddress());
                ps.setObject(8, getDistance2site());
                ps.setObject(9, getForemanReqPlant());
                ps.setObject(10, getForemanContact());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from xmachineorderitm
            Xmachineorderitm[] records = (Xmachineorderitm[])Xmachineorderitm.load(getConnection(),"xmachineorder_id = " + getXmachineorderId(),null);
            for (int i = 0; i<records.length; i++) {
                Xmachineorderitm xmachineorderitm = records[i];
                xmachineorderitm.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xmachineorder " +
                "WHERE xmachineorder_id = " + getXmachineorderId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXmachineorderId(new Integer(-getXmachineorderId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXmachineorderId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachineorder_id,issue_date,require_date,xemployee_id,xsite_id,xclient_id,xorder_id,site_address,distance2site,foreman_req_plant,foreman_contact FROM xmachineorder " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xmachineorder(con,new Integer(rs.getInt(1)),rs.getDate(2),rs.getDate(3),new Integer(rs.getInt(4)),new Integer(rs.getInt(5)),new Integer(rs.getInt(6)),new Integer(rs.getInt(7)),rs.getString(8),new Integer(rs.getInt(9)),rs.getString(10),rs.getString(11)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xmachineorder[] objects = new Xmachineorder[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xmachineorder xmachineorder = (Xmachineorder) lst.get(i);
            objects[i] = xmachineorder;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachineorder_id FROM xmachineorder " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXmachineorderId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xmachineorderId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXmachineorderId(id);
        setNew(prevIsNew);
    }

    public Integer getXmachineorderId() {
        return xmachineorderId;
    }

    public void setXmachineorderId(Integer xmachineorderId) throws ForeignKeyViolationException {
        setWasChanged(this.xmachineorderId != null && this.xmachineorderId != xmachineorderId);
        this.xmachineorderId = xmachineorderId;
        setNew(xmachineorderId.intValue() == 0);
    }

    public Date getIssueDate() {
        return issueDate;
    }

    public void setIssueDate(Date issueDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.issueDate != null && !this.issueDate.equals(issueDate));
        this.issueDate = issueDate;
    }

    public Date getRequireDate() {
        return requireDate;
    }

    public void setRequireDate(Date requireDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.requireDate != null && !this.requireDate.equals(requireDate));
        this.requireDate = requireDate;
    }

    public Integer getXemployeeId() {
        return xemployeeId;
    }

    public void setXemployeeId(Integer xemployeeId) throws SQLException, ForeignKeyViolationException {
        if (xemployeeId!=null && !Xemployee.exists(getConnection(),"xemployee_id = " + xemployeeId)) {
            throw new ForeignKeyViolationException("Can't set xemployee_id, foreign key violation: xmachineorder_xemployee_fk");
        }
        setWasChanged(this.xemployeeId != null && !this.xemployeeId.equals(xemployeeId));
        this.xemployeeId = xemployeeId;
    }

    public Integer getXsiteId() {
        return xsiteId;
    }

    public void setXsiteId(Integer xsiteId) throws SQLException, ForeignKeyViolationException {
        if (xsiteId!=null && !Xsite.exists(getConnection(),"xsite_id = " + xsiteId)) {
            throw new ForeignKeyViolationException("Can't set xsite_id, foreign key violation: xmachineorder_xsite_fk");
        }
        setWasChanged(this.xsiteId != null && !this.xsiteId.equals(xsiteId));
        this.xsiteId = xsiteId;
    }

    public Integer getXclientId() {
        return xclientId;
    }

    public void setXclientId(Integer xclientId) throws SQLException, ForeignKeyViolationException {
        if (null != xclientId)
            xclientId = xclientId == 0 ? null : xclientId;
        if (xclientId!=null && !Xclient.exists(getConnection(),"xclient_id = " + xclientId)) {
            throw new ForeignKeyViolationException("Can't set xclient_id, foreign key violation: xmachineorder_xclient_fk");
        }
        setWasChanged(this.xclientId != null && !this.xclientId.equals(xclientId));
        this.xclientId = xclientId;
    }

    public Integer getXorderId() {
        return xorderId;
    }

    public void setXorderId(Integer xorderId) throws SQLException, ForeignKeyViolationException {
        if (null != xorderId)
            xorderId = xorderId == 0 ? null : xorderId;
        if (xorderId!=null && !Xorder.exists(getConnection(),"xorder_id = " + xorderId)) {
            throw new ForeignKeyViolationException("Can't set xorder_id, foreign key violation: xmachineorder_xorder_fk");
        }
        setWasChanged(this.xorderId != null && !this.xorderId.equals(xorderId));
        this.xorderId = xorderId;
    }

    public String getSiteAddress() {
        return siteAddress;
    }

    public void setSiteAddress(String siteAddress) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.siteAddress != null && !this.siteAddress.equals(siteAddress));
        this.siteAddress = siteAddress;
    }

    public Integer getDistance2site() {
        return distance2site;
    }

    public void setDistance2site(Integer distance2site) throws SQLException, ForeignKeyViolationException {
        if (null != distance2site)
            distance2site = distance2site == 0 ? null : distance2site;
        setWasChanged(this.distance2site != null && !this.distance2site.equals(distance2site));
        this.distance2site = distance2site;
    }

    public String getForemanReqPlant() {
        return foremanReqPlant;
    }

    public void setForemanReqPlant(String foremanReqPlant) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.foremanReqPlant != null && !this.foremanReqPlant.equals(foremanReqPlant));
        this.foremanReqPlant = foremanReqPlant;
    }

    public String getForemanContact() {
        return foremanContact;
    }

    public void setForemanContact(String foremanContact) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.foremanContact != null && !this.foremanContact.equals(foremanContact));
        this.foremanContact = foremanContact;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[11];
        columnValues[0] = getXmachineorderId();
        columnValues[1] = getIssueDate();
        columnValues[2] = getRequireDate();
        columnValues[3] = getXemployeeId();
        columnValues[4] = getXsiteId();
        columnValues[5] = getXclientId();
        columnValues[6] = getXorderId();
        columnValues[7] = getSiteAddress();
        columnValues[8] = getDistance2site();
        columnValues[9] = getForemanReqPlant();
        columnValues[10] = getForemanContact();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXmachineorderId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXmachineorderId(null);
        }
        setIssueDate(toDate(flds[1]));
        setRequireDate(toDate(flds[2]));
        try {
            setXemployeeId(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setXemployeeId(null);
        }
        try {
            setXsiteId(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setXsiteId(null);
        }
        try {
            setXclientId(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setXclientId(null);
        }
        try {
            setXorderId(Integer.parseInt(flds[6]));
        } catch(NumberFormatException ne) {
            setXorderId(null);
        }
        setSiteAddress(flds[7]);
        try {
            setDistance2site(Integer.parseInt(flds[8]));
        } catch(NumberFormatException ne) {
            setDistance2site(null);
        }
        setForemanReqPlant(flds[9]);
        setForemanContact(flds[10]);
    }
}
