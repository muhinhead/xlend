// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Fri Dec 02 17:45:22 EET 2011
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xemplcontract extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xemplcontractId = null;
    private String contractNum = null;
    private Integer xoperatorId = null;
    private Integer iscurrent = null;
    private Date startdate = null;
    private Date enddate = null;
    private Integer duration = null;

    public Xemplcontract(Connection connection) {
        super(connection, "xemplcontract", "xemplcontract_id");
        setColumnNames(new String[]{"xemplcontract_id", "contract_num", "xoperator_id", "iscurrent", "startdate", "enddate", "duration"});
    }

    public Xemplcontract(Connection connection, Integer xemplcontractId, String contractNum, Integer xoperatorId, Integer iscurrent, Date startdate, Date enddate, Integer duration) {
        super(connection, "xemplcontract", "xemplcontract_id");
        setNew(xemplcontractId.intValue() <= 0);
//        if (xemplcontractId.intValue() != 0) {
            this.xemplcontractId = xemplcontractId;
//        }
        this.contractNum = contractNum;
        this.xoperatorId = xoperatorId;
        this.iscurrent = iscurrent;
        this.startdate = startdate;
        this.enddate = enddate;
        this.duration = duration;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xemplcontract xemplcontract = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemplcontract_id,contract_num,xoperator_id,iscurrent,startdate,enddate,duration FROM xemplcontract WHERE xemplcontract_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xemplcontract = new Xemplcontract(getConnection());
                xemplcontract.setXemplcontractId(new Integer(rs.getInt(1)));
                xemplcontract.setContractNum(rs.getString(2));
                xemplcontract.setXoperatorId(new Integer(rs.getInt(3)));
                xemplcontract.setIscurrent(new Integer(rs.getInt(4)));
                xemplcontract.setStartdate(rs.getDate(5));
                xemplcontract.setEnddate(rs.getDate(6));
                xemplcontract.setDuration(new Integer(rs.getInt(7)));
                xemplcontract.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xemplcontract;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xemplcontract ("+(getXemplcontractId().intValue()!=0?"xemplcontract_id,":"")+"contract_num,xoperator_id,iscurrent,startdate,enddate,duration) values("+(getXemplcontractId().intValue()!=0?"?,":"")+"?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXemplcontractId().intValue()!=0) {
                 ps.setObject(++n, getXemplcontractId());
             }
             ps.setObject(++n, getContractNum());
             ps.setObject(++n, getXoperatorId());
             ps.setObject(++n, getIscurrent());
             ps.setObject(++n, getStartdate());
             ps.setObject(++n, getEnddate());
             ps.setObject(++n, getDuration());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXemplcontractId().intValue()==0) {
             stmt = "SELECT max(xemplcontract_id) FROM xemplcontract";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXemplcontractId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xemplcontract " +
                    "SET contract_num = ?, xoperator_id = ?, iscurrent = ?, startdate = ?, enddate = ?, duration = ?" + 
                    " WHERE xemplcontract_id = " + getXemplcontractId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getContractNum());
                ps.setObject(2, getXoperatorId());
                ps.setObject(3, getIscurrent());
                ps.setObject(4, getStartdate());
                ps.setObject(5, getEnddate());
                ps.setObject(6, getDuration());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xemplcontract " +
                "WHERE xemplcontract_id = " + getXemplcontractId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXemplcontractId(new Integer(-getXemplcontractId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXemplcontractId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemplcontract_id,contract_num,xoperator_id,iscurrent,startdate,enddate,duration FROM xemplcontract " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xemplcontract(con,new Integer(rs.getInt(1)),rs.getString(2),new Integer(rs.getInt(3)),new Integer(rs.getInt(4)),rs.getDate(5),rs.getDate(6),new Integer(rs.getInt(7))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xemplcontract[] objects = new Xemplcontract[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xemplcontract xemplcontract = (Xemplcontract) lst.get(i);
            objects[i] = xemplcontract;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemplcontract_id FROM xemplcontract " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXemplcontractId() + getDelimiter();
    //}

    public Integer getXemplcontractId() {
        return xemplcontractId;
    }

    public void setXemplcontractId(Integer xemplcontractId) throws ForeignKeyViolationException {
        setWasChanged(this.xemplcontractId != null && this.xemplcontractId != xemplcontractId);
        this.xemplcontractId = xemplcontractId;
        setNew(xemplcontractId.intValue() == 0);
    }

    public String getContractNum() {
        return contractNum;
    }

    public void setContractNum(String contractNum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractNum != null && !this.contractNum.equals(contractNum));
        this.contractNum = contractNum;
    }

    public Integer getXoperatorId() {
        return xoperatorId;
    }

    public void setXoperatorId(Integer xoperatorId) throws SQLException, ForeignKeyViolationException {
        if (null != xoperatorId)
            xoperatorId = xoperatorId == 0 ? null : xoperatorId;
        if (xoperatorId!=null && !Xoperator.exists(getConnection(),"xoperator_id = " + xoperatorId)) {
            throw new ForeignKeyViolationException("Can't set xoperator_id, foreign key violation: xemplcontract_xoperator_fk");
        }
        setWasChanged(this.xoperatorId != null && !this.xoperatorId.equals(xoperatorId));
        this.xoperatorId = xoperatorId;
    }

    public Integer getIscurrent() {
        return iscurrent;
    }

    public void setIscurrent(Integer iscurrent) throws SQLException, ForeignKeyViolationException {
        if (null != iscurrent)
            iscurrent = iscurrent == 0 ? null : iscurrent;
        setWasChanged(this.iscurrent != null && !this.iscurrent.equals(iscurrent));
        this.iscurrent = iscurrent;
    }

    public Date getStartdate() {
        return startdate;
    }

    public void setStartdate(Date startdate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.startdate != null && !this.startdate.equals(startdate));
        this.startdate = startdate;
    }

    public Date getEnddate() {
        return enddate;
    }

    public void setEnddate(Date enddate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.enddate != null && !this.enddate.equals(enddate));
        this.enddate = enddate;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) throws SQLException, ForeignKeyViolationException {
        if (null != duration)
            duration = duration == 0 ? null : duration;
        setWasChanged(this.duration != null && !this.duration.equals(duration));
        this.duration = duration;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[7];
        columnValues[0] = getXemplcontractId();
        columnValues[1] = getContractNum();
        columnValues[2] = getXoperatorId();
        columnValues[3] = getIscurrent();
        columnValues[4] = getStartdate();
        columnValues[5] = getEnddate();
        columnValues[6] = getDuration();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXemplcontractId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXemplcontractId(null);
        }
        setContractNum(flds[1]);
        try {
            setXoperatorId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setXoperatorId(null);
        }
        try {
            setIscurrent(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setIscurrent(null);
        }
        setStartdate(toDate(flds[4]));
        setEnddate(toDate(flds[5]));
        try {
            setDuration(Integer.parseInt(flds[6]));
        } catch(NumberFormatException ne) {
            setDuration(null);
        }
    }
}
