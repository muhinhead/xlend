// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Apr 21 12:01:28 EEST 2013
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xopclocksheet extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xopclocksheetId = null;
    private Integer xemployeeId = null;
    private Integer xsiteId = null;
    private Date sheetDate = null;
    private Integer xmachineId = null;
    private Double kmStart1 = null;
    private Double kmStop1 = null;
    private Timestamp workFrom1 = null;
    private Timestamp workTo1 = null;
    private Timestamp standFrom1 = null;
    private Timestamp standTo1 = null;
    private String reason1 = null;
    private Double kmStart2 = null;
    private Double kmStop2 = null;
    private Timestamp workFrom2 = null;
    private Timestamp workTo2 = null;
    private Timestamp standFrom2 = null;
    private Timestamp standTo2 = null;
    private String reason2 = null;
    private Double kmStart3 = null;
    private Double kmStop3 = null;
    private Timestamp workFrom3 = null;
    private Timestamp workTo3 = null;
    private Timestamp standFrom3 = null;
    private Timestamp standTo3 = null;
    private String reason3 = null;
    private Double kmStart4 = null;
    private Double kmStop4 = null;
    private Timestamp workFrom4 = null;
    private Timestamp workTo4 = null;
    private Timestamp standFrom4 = null;
    private Timestamp standTo4 = null;
    private String reason4 = null;
    private Double kmStart5 = null;
    private Double kmStop5 = null;
    private Timestamp workFrom5 = null;
    private Timestamp workTo5 = null;
    private Timestamp standFrom5 = null;
    private Timestamp standTo5 = null;
    private String reason5 = null;
    private Double kmStart6 = null;
    private Double kmStop6 = null;
    private Timestamp workFrom6 = null;
    private Timestamp workTo6 = null;
    private Timestamp standFrom6 = null;
    private Timestamp standTo6 = null;
    private String reason6 = null;
    private Double kmStart7 = null;
    private Double kmStop7 = null;
    private Timestamp workFrom7 = null;
    private Timestamp workTo7 = null;
    private Timestamp standFrom7 = null;
    private Timestamp standTo7 = null;
    private String reason7 = null;

    public Xopclocksheet(Connection connection) {
        super(connection, "xopclocksheet", "xopclocksheet_id");
        setColumnNames(new String[]{"xopclocksheet_id", "xemployee_id", "xsite_id", "sheet_date", "xmachine_id", "km_start1", "km_stop1", "work_from1", "work_to1", "stand_from1", "stand_to1", "reason1", "km_start2", "km_stop2", "work_from2", "work_to2", "stand_from2", "stand_to2", "reason2", "km_start3", "km_stop3", "work_from3", "work_to3", "stand_from3", "stand_to3", "reason3", "km_start4", "km_stop4", "work_from4", "work_to4", "stand_from4", "stand_to4", "reason4", "km_start5", "km_stop5", "work_from5", "work_to5", "stand_from5", "stand_to5", "reason5", "km_start6", "km_stop6", "work_from6", "work_to6", "stand_from6", "stand_to6", "reason6", "km_start7", "km_stop7", "work_from7", "work_to7", "stand_from7", "stand_to7", "reason7"});
    }

    public Xopclocksheet(Connection connection, Integer xopclocksheetId, Integer xemployeeId, Integer xsiteId, Date sheetDate, Integer xmachineId, Double kmStart1, Double kmStop1, Timestamp workFrom1, Timestamp workTo1, Timestamp standFrom1, Timestamp standTo1, String reason1, Double kmStart2, Double kmStop2, Timestamp workFrom2, Timestamp workTo2, Timestamp standFrom2, Timestamp standTo2, String reason2, Double kmStart3, Double kmStop3, Timestamp workFrom3, Timestamp workTo3, Timestamp standFrom3, Timestamp standTo3, String reason3, Double kmStart4, Double kmStop4, Timestamp workFrom4, Timestamp workTo4, Timestamp standFrom4, Timestamp standTo4, String reason4, Double kmStart5, Double kmStop5, Timestamp workFrom5, Timestamp workTo5, Timestamp standFrom5, Timestamp standTo5, String reason5, Double kmStart6, Double kmStop6, Timestamp workFrom6, Timestamp workTo6, Timestamp standFrom6, Timestamp standTo6, String reason6, Double kmStart7, Double kmStop7, Timestamp workFrom7, Timestamp workTo7, Timestamp standFrom7, Timestamp standTo7, String reason7) {
        super(connection, "xopclocksheet", "xopclocksheet_id");
        setNew(xopclocksheetId.intValue() <= 0);
//        if (xopclocksheetId.intValue() != 0) {
            this.xopclocksheetId = xopclocksheetId;
//        }
        this.xemployeeId = xemployeeId;
        this.xsiteId = xsiteId;
        this.sheetDate = sheetDate;
        this.xmachineId = xmachineId;
        this.kmStart1 = kmStart1;
        this.kmStop1 = kmStop1;
        this.workFrom1 = workFrom1;
        this.workTo1 = workTo1;
        this.standFrom1 = standFrom1;
        this.standTo1 = standTo1;
        this.reason1 = reason1;
        this.kmStart2 = kmStart2;
        this.kmStop2 = kmStop2;
        this.workFrom2 = workFrom2;
        this.workTo2 = workTo2;
        this.standFrom2 = standFrom2;
        this.standTo2 = standTo2;
        this.reason2 = reason2;
        this.kmStart3 = kmStart3;
        this.kmStop3 = kmStop3;
        this.workFrom3 = workFrom3;
        this.workTo3 = workTo3;
        this.standFrom3 = standFrom3;
        this.standTo3 = standTo3;
        this.reason3 = reason3;
        this.kmStart4 = kmStart4;
        this.kmStop4 = kmStop4;
        this.workFrom4 = workFrom4;
        this.workTo4 = workTo4;
        this.standFrom4 = standFrom4;
        this.standTo4 = standTo4;
        this.reason4 = reason4;
        this.kmStart5 = kmStart5;
        this.kmStop5 = kmStop5;
        this.workFrom5 = workFrom5;
        this.workTo5 = workTo5;
        this.standFrom5 = standFrom5;
        this.standTo5 = standTo5;
        this.reason5 = reason5;
        this.kmStart6 = kmStart6;
        this.kmStop6 = kmStop6;
        this.workFrom6 = workFrom6;
        this.workTo6 = workTo6;
        this.standFrom6 = standFrom6;
        this.standTo6 = standTo6;
        this.reason6 = reason6;
        this.kmStart7 = kmStart7;
        this.kmStop7 = kmStop7;
        this.workFrom7 = workFrom7;
        this.workTo7 = workTo7;
        this.standFrom7 = standFrom7;
        this.standTo7 = standTo7;
        this.reason7 = reason7;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xopclocksheet xopclocksheet = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xopclocksheet_id,xemployee_id,xsite_id,sheet_date,xmachine_id,km_start1,km_stop1,work_from1,work_to1,stand_from1,stand_to1,reason1,km_start2,km_stop2,work_from2,work_to2,stand_from2,stand_to2,reason2,km_start3,km_stop3,work_from3,work_to3,stand_from3,stand_to3,reason3,km_start4,km_stop4,work_from4,work_to4,stand_from4,stand_to4,reason4,km_start5,km_stop5,work_from5,work_to5,stand_from5,stand_to5,reason5,km_start6,km_stop6,work_from6,work_to6,stand_from6,stand_to6,reason6,km_start7,km_stop7,work_from7,work_to7,stand_from7,stand_to7,reason7 FROM xopclocksheet WHERE xopclocksheet_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xopclocksheet = new Xopclocksheet(getConnection());
                xopclocksheet.setXopclocksheetId(new Integer(rs.getInt(1)));
                xopclocksheet.setXemployeeId(new Integer(rs.getInt(2)));
                xopclocksheet.setXsiteId(new Integer(rs.getInt(3)));
                xopclocksheet.setSheetDate(rs.getDate(4));
                xopclocksheet.setXmachineId(new Integer(rs.getInt(5)));
                xopclocksheet.setKmStart1(rs.getDouble(6));
                xopclocksheet.setKmStop1(rs.getDouble(7));
                xopclocksheet.setWorkFrom1(rs.getTimestamp(8));
                xopclocksheet.setWorkTo1(rs.getTimestamp(9));
                xopclocksheet.setStandFrom1(rs.getTimestamp(10));
                xopclocksheet.setStandTo1(rs.getTimestamp(11));
                xopclocksheet.setReason1(rs.getString(12));
                xopclocksheet.setKmStart2(rs.getDouble(13));
                xopclocksheet.setKmStop2(rs.getDouble(14));
                xopclocksheet.setWorkFrom2(rs.getTimestamp(15));
                xopclocksheet.setWorkTo2(rs.getTimestamp(16));
                xopclocksheet.setStandFrom2(rs.getTimestamp(17));
                xopclocksheet.setStandTo2(rs.getTimestamp(18));
                xopclocksheet.setReason2(rs.getString(19));
                xopclocksheet.setKmStart3(rs.getDouble(20));
                xopclocksheet.setKmStop3(rs.getDouble(21));
                xopclocksheet.setWorkFrom3(rs.getTimestamp(22));
                xopclocksheet.setWorkTo3(rs.getTimestamp(23));
                xopclocksheet.setStandFrom3(rs.getTimestamp(24));
                xopclocksheet.setStandTo3(rs.getTimestamp(25));
                xopclocksheet.setReason3(rs.getString(26));
                xopclocksheet.setKmStart4(rs.getDouble(27));
                xopclocksheet.setKmStop4(rs.getDouble(28));
                xopclocksheet.setWorkFrom4(rs.getTimestamp(29));
                xopclocksheet.setWorkTo4(rs.getTimestamp(30));
                xopclocksheet.setStandFrom4(rs.getTimestamp(31));
                xopclocksheet.setStandTo4(rs.getTimestamp(32));
                xopclocksheet.setReason4(rs.getString(33));
                xopclocksheet.setKmStart5(rs.getDouble(34));
                xopclocksheet.setKmStop5(rs.getDouble(35));
                xopclocksheet.setWorkFrom5(rs.getTimestamp(36));
                xopclocksheet.setWorkTo5(rs.getTimestamp(37));
                xopclocksheet.setStandFrom5(rs.getTimestamp(38));
                xopclocksheet.setStandTo5(rs.getTimestamp(39));
                xopclocksheet.setReason5(rs.getString(40));
                xopclocksheet.setKmStart6(rs.getDouble(41));
                xopclocksheet.setKmStop6(rs.getDouble(42));
                xopclocksheet.setWorkFrom6(rs.getTimestamp(43));
                xopclocksheet.setWorkTo6(rs.getTimestamp(44));
                xopclocksheet.setStandFrom6(rs.getTimestamp(45));
                xopclocksheet.setStandTo6(rs.getTimestamp(46));
                xopclocksheet.setReason6(rs.getString(47));
                xopclocksheet.setKmStart7(rs.getDouble(48));
                xopclocksheet.setKmStop7(rs.getDouble(49));
                xopclocksheet.setWorkFrom7(rs.getTimestamp(50));
                xopclocksheet.setWorkTo7(rs.getTimestamp(51));
                xopclocksheet.setStandFrom7(rs.getTimestamp(52));
                xopclocksheet.setStandTo7(rs.getTimestamp(53));
                xopclocksheet.setReason7(rs.getString(54));
                xopclocksheet.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xopclocksheet;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xopclocksheet ("+(getXopclocksheetId().intValue()!=0?"xopclocksheet_id,":"")+"xemployee_id,xsite_id,sheet_date,xmachine_id,km_start1,km_stop1,work_from1,work_to1,stand_from1,stand_to1,reason1,km_start2,km_stop2,work_from2,work_to2,stand_from2,stand_to2,reason2,km_start3,km_stop3,work_from3,work_to3,stand_from3,stand_to3,reason3,km_start4,km_stop4,work_from4,work_to4,stand_from4,stand_to4,reason4,km_start5,km_stop5,work_from5,work_to5,stand_from5,stand_to5,reason5,km_start6,km_stop6,work_from6,work_to6,stand_from6,stand_to6,reason6,km_start7,km_stop7,work_from7,work_to7,stand_from7,stand_to7,reason7) values("+(getXopclocksheetId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXopclocksheetId().intValue()!=0) {
                 ps.setObject(++n, getXopclocksheetId());
             }
             ps.setObject(++n, getXemployeeId());
             ps.setObject(++n, getXsiteId());
             ps.setObject(++n, getSheetDate());
             ps.setObject(++n, getXmachineId());
             ps.setObject(++n, getKmStart1());
             ps.setObject(++n, getKmStop1());
             ps.setObject(++n, getWorkFrom1());
             ps.setObject(++n, getWorkTo1());
             ps.setObject(++n, getStandFrom1());
             ps.setObject(++n, getStandTo1());
             ps.setObject(++n, getReason1());
             ps.setObject(++n, getKmStart2());
             ps.setObject(++n, getKmStop2());
             ps.setObject(++n, getWorkFrom2());
             ps.setObject(++n, getWorkTo2());
             ps.setObject(++n, getStandFrom2());
             ps.setObject(++n, getStandTo2());
             ps.setObject(++n, getReason2());
             ps.setObject(++n, getKmStart3());
             ps.setObject(++n, getKmStop3());
             ps.setObject(++n, getWorkFrom3());
             ps.setObject(++n, getWorkTo3());
             ps.setObject(++n, getStandFrom3());
             ps.setObject(++n, getStandTo3());
             ps.setObject(++n, getReason3());
             ps.setObject(++n, getKmStart4());
             ps.setObject(++n, getKmStop4());
             ps.setObject(++n, getWorkFrom4());
             ps.setObject(++n, getWorkTo4());
             ps.setObject(++n, getStandFrom4());
             ps.setObject(++n, getStandTo4());
             ps.setObject(++n, getReason4());
             ps.setObject(++n, getKmStart5());
             ps.setObject(++n, getKmStop5());
             ps.setObject(++n, getWorkFrom5());
             ps.setObject(++n, getWorkTo5());
             ps.setObject(++n, getStandFrom5());
             ps.setObject(++n, getStandTo5());
             ps.setObject(++n, getReason5());
             ps.setObject(++n, getKmStart6());
             ps.setObject(++n, getKmStop6());
             ps.setObject(++n, getWorkFrom6());
             ps.setObject(++n, getWorkTo6());
             ps.setObject(++n, getStandFrom6());
             ps.setObject(++n, getStandTo6());
             ps.setObject(++n, getReason6());
             ps.setObject(++n, getKmStart7());
             ps.setObject(++n, getKmStop7());
             ps.setObject(++n, getWorkFrom7());
             ps.setObject(++n, getWorkTo7());
             ps.setObject(++n, getStandFrom7());
             ps.setObject(++n, getStandTo7());
             ps.setObject(++n, getReason7());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXopclocksheetId().intValue()==0) {
             stmt = "SELECT max(xopclocksheet_id) FROM xopclocksheet";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXopclocksheetId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xopclocksheet " +
                    "SET xemployee_id = ?, xsite_id = ?, sheet_date = ?, xmachine_id = ?, km_start1 = ?, km_stop1 = ?, work_from1 = ?, work_to1 = ?, stand_from1 = ?, stand_to1 = ?, reason1 = ?, km_start2 = ?, km_stop2 = ?, work_from2 = ?, work_to2 = ?, stand_from2 = ?, stand_to2 = ?, reason2 = ?, km_start3 = ?, km_stop3 = ?, work_from3 = ?, work_to3 = ?, stand_from3 = ?, stand_to3 = ?, reason3 = ?, km_start4 = ?, km_stop4 = ?, work_from4 = ?, work_to4 = ?, stand_from4 = ?, stand_to4 = ?, reason4 = ?, km_start5 = ?, km_stop5 = ?, work_from5 = ?, work_to5 = ?, stand_from5 = ?, stand_to5 = ?, reason5 = ?, km_start6 = ?, km_stop6 = ?, work_from6 = ?, work_to6 = ?, stand_from6 = ?, stand_to6 = ?, reason6 = ?, km_start7 = ?, km_stop7 = ?, work_from7 = ?, work_to7 = ?, stand_from7 = ?, stand_to7 = ?, reason7 = ?" + 
                    " WHERE xopclocksheet_id = " + getXopclocksheetId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getXemployeeId());
                ps.setObject(2, getXsiteId());
                ps.setObject(3, getSheetDate());
                ps.setObject(4, getXmachineId());
                ps.setObject(5, getKmStart1());
                ps.setObject(6, getKmStop1());
                ps.setObject(7, getWorkFrom1());
                ps.setObject(8, getWorkTo1());
                ps.setObject(9, getStandFrom1());
                ps.setObject(10, getStandTo1());
                ps.setObject(11, getReason1());
                ps.setObject(12, getKmStart2());
                ps.setObject(13, getKmStop2());
                ps.setObject(14, getWorkFrom2());
                ps.setObject(15, getWorkTo2());
                ps.setObject(16, getStandFrom2());
                ps.setObject(17, getStandTo2());
                ps.setObject(18, getReason2());
                ps.setObject(19, getKmStart3());
                ps.setObject(20, getKmStop3());
                ps.setObject(21, getWorkFrom3());
                ps.setObject(22, getWorkTo3());
                ps.setObject(23, getStandFrom3());
                ps.setObject(24, getStandTo3());
                ps.setObject(25, getReason3());
                ps.setObject(26, getKmStart4());
                ps.setObject(27, getKmStop4());
                ps.setObject(28, getWorkFrom4());
                ps.setObject(29, getWorkTo4());
                ps.setObject(30, getStandFrom4());
                ps.setObject(31, getStandTo4());
                ps.setObject(32, getReason4());
                ps.setObject(33, getKmStart5());
                ps.setObject(34, getKmStop5());
                ps.setObject(35, getWorkFrom5());
                ps.setObject(36, getWorkTo5());
                ps.setObject(37, getStandFrom5());
                ps.setObject(38, getStandTo5());
                ps.setObject(39, getReason5());
                ps.setObject(40, getKmStart6());
                ps.setObject(41, getKmStop6());
                ps.setObject(42, getWorkFrom6());
                ps.setObject(43, getWorkTo6());
                ps.setObject(44, getStandFrom6());
                ps.setObject(45, getStandTo6());
                ps.setObject(46, getReason6());
                ps.setObject(47, getKmStart7());
                ps.setObject(48, getKmStop7());
                ps.setObject(49, getWorkFrom7());
                ps.setObject(50, getWorkTo7());
                ps.setObject(51, getStandFrom7());
                ps.setObject(52, getStandTo7());
                ps.setObject(53, getReason7());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xopclocksheet " +
                "WHERE xopclocksheet_id = " + getXopclocksheetId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXopclocksheetId(new Integer(-getXopclocksheetId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXopclocksheetId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xopclocksheet_id,xemployee_id,xsite_id,sheet_date,xmachine_id,km_start1,km_stop1,work_from1,work_to1,stand_from1,stand_to1,reason1,km_start2,km_stop2,work_from2,work_to2,stand_from2,stand_to2,reason2,km_start3,km_stop3,work_from3,work_to3,stand_from3,stand_to3,reason3,km_start4,km_stop4,work_from4,work_to4,stand_from4,stand_to4,reason4,km_start5,km_stop5,work_from5,work_to5,stand_from5,stand_to5,reason5,km_start6,km_stop6,work_from6,work_to6,stand_from6,stand_to6,reason6,km_start7,km_stop7,work_from7,work_to7,stand_from7,stand_to7,reason7 FROM xopclocksheet " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xopclocksheet(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3)),rs.getDate(4),new Integer(rs.getInt(5)),rs.getDouble(6),rs.getDouble(7),rs.getTimestamp(8),rs.getTimestamp(9),rs.getTimestamp(10),rs.getTimestamp(11),rs.getString(12),rs.getDouble(13),rs.getDouble(14),rs.getTimestamp(15),rs.getTimestamp(16),rs.getTimestamp(17),rs.getTimestamp(18),rs.getString(19),rs.getDouble(20),rs.getDouble(21),rs.getTimestamp(22),rs.getTimestamp(23),rs.getTimestamp(24),rs.getTimestamp(25),rs.getString(26),rs.getDouble(27),rs.getDouble(28),rs.getTimestamp(29),rs.getTimestamp(30),rs.getTimestamp(31),rs.getTimestamp(32),rs.getString(33),rs.getDouble(34),rs.getDouble(35),rs.getTimestamp(36),rs.getTimestamp(37),rs.getTimestamp(38),rs.getTimestamp(39),rs.getString(40),rs.getDouble(41),rs.getDouble(42),rs.getTimestamp(43),rs.getTimestamp(44),rs.getTimestamp(45),rs.getTimestamp(46),rs.getString(47),rs.getDouble(48),rs.getDouble(49),rs.getTimestamp(50),rs.getTimestamp(51),rs.getTimestamp(52),rs.getTimestamp(53),rs.getString(54)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xopclocksheet[] objects = new Xopclocksheet[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xopclocksheet xopclocksheet = (Xopclocksheet) lst.get(i);
            objects[i] = xopclocksheet;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xopclocksheet_id FROM xopclocksheet " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXopclocksheetId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xopclocksheetId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXopclocksheetId(id);
        setNew(prevIsNew);
    }

    public Integer getXopclocksheetId() {
        return xopclocksheetId;
    }

    public void setXopclocksheetId(Integer xopclocksheetId) throws ForeignKeyViolationException {
        setWasChanged(this.xopclocksheetId != null && this.xopclocksheetId != xopclocksheetId);
        this.xopclocksheetId = xopclocksheetId;
        setNew(xopclocksheetId.intValue() == 0);
    }

    public Integer getXemployeeId() {
        return xemployeeId;
    }

    public void setXemployeeId(Integer xemployeeId) throws SQLException, ForeignKeyViolationException {
        if (xemployeeId!=null && !Xemployee.exists(getConnection(),"xemployee_id = " + xemployeeId)) {
            throw new ForeignKeyViolationException("Can't set xemployee_id, foreign key violation: xopclocksheet_xemployee_fk");
        }
        setWasChanged(this.xemployeeId != null && !this.xemployeeId.equals(xemployeeId));
        this.xemployeeId = xemployeeId;
    }

    public Integer getXsiteId() {
        return xsiteId;
    }

    public void setXsiteId(Integer xsiteId) throws SQLException, ForeignKeyViolationException {
        if (xsiteId!=null && !Xsite.exists(getConnection(),"xsite_id = " + xsiteId)) {
            throw new ForeignKeyViolationException("Can't set xsite_id, foreign key violation: xopclocksheet_xsite_fk");
        }
        setWasChanged(this.xsiteId != null && !this.xsiteId.equals(xsiteId));
        this.xsiteId = xsiteId;
    }

    public Date getSheetDate() {
        return sheetDate;
    }

    public void setSheetDate(Date sheetDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.sheetDate != null && !this.sheetDate.equals(sheetDate));
        this.sheetDate = sheetDate;
    }

    public Integer getXmachineId() {
        return xmachineId;
    }

    public void setXmachineId(Integer xmachineId) throws SQLException, ForeignKeyViolationException {
        if (xmachineId!=null && !Xmachine.exists(getConnection(),"xmachine_id = " + xmachineId)) {
            throw new ForeignKeyViolationException("Can't set xmachine_id, foreign key violation: xopclocksheet_xmachine_fk");
        }
        setWasChanged(this.xmachineId != null && !this.xmachineId.equals(xmachineId));
        this.xmachineId = xmachineId;
    }

    public Double getKmStart1() {
        return kmStart1;
    }

    public void setKmStart1(Double kmStart1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart1 != null && !this.kmStart1.equals(kmStart1));
        this.kmStart1 = kmStart1;
    }

    public Double getKmStop1() {
        return kmStop1;
    }

    public void setKmStop1(Double kmStop1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop1 != null && !this.kmStop1.equals(kmStop1));
        this.kmStop1 = kmStop1;
    }

    public Timestamp getWorkFrom1() {
        return workFrom1;
    }

    public void setWorkFrom1(Timestamp workFrom1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom1 != null && !this.workFrom1.equals(workFrom1));
        this.workFrom1 = workFrom1;
    }

    public Timestamp getWorkTo1() {
        return workTo1;
    }

    public void setWorkTo1(Timestamp workTo1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo1 != null && !this.workTo1.equals(workTo1));
        this.workTo1 = workTo1;
    }

    public Timestamp getStandFrom1() {
        return standFrom1;
    }

    public void setStandFrom1(Timestamp standFrom1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom1 != null && !this.standFrom1.equals(standFrom1));
        this.standFrom1 = standFrom1;
    }

    public Timestamp getStandTo1() {
        return standTo1;
    }

    public void setStandTo1(Timestamp standTo1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo1 != null && !this.standTo1.equals(standTo1));
        this.standTo1 = standTo1;
    }

    public String getReason1() {
        return reason1;
    }

    public void setReason1(String reason1) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason1 != null && !this.reason1.equals(reason1));
        this.reason1 = reason1;
    }

    public Double getKmStart2() {
        return kmStart2;
    }

    public void setKmStart2(Double kmStart2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart2 != null && !this.kmStart2.equals(kmStart2));
        this.kmStart2 = kmStart2;
    }

    public Double getKmStop2() {
        return kmStop2;
    }

    public void setKmStop2(Double kmStop2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop2 != null && !this.kmStop2.equals(kmStop2));
        this.kmStop2 = kmStop2;
    }

    public Timestamp getWorkFrom2() {
        return workFrom2;
    }

    public void setWorkFrom2(Timestamp workFrom2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom2 != null && !this.workFrom2.equals(workFrom2));
        this.workFrom2 = workFrom2;
    }

    public Timestamp getWorkTo2() {
        return workTo2;
    }

    public void setWorkTo2(Timestamp workTo2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo2 != null && !this.workTo2.equals(workTo2));
        this.workTo2 = workTo2;
    }

    public Timestamp getStandFrom2() {
        return standFrom2;
    }

    public void setStandFrom2(Timestamp standFrom2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom2 != null && !this.standFrom2.equals(standFrom2));
        this.standFrom2 = standFrom2;
    }

    public Timestamp getStandTo2() {
        return standTo2;
    }

    public void setStandTo2(Timestamp standTo2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo2 != null && !this.standTo2.equals(standTo2));
        this.standTo2 = standTo2;
    }

    public String getReason2() {
        return reason2;
    }

    public void setReason2(String reason2) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason2 != null && !this.reason2.equals(reason2));
        this.reason2 = reason2;
    }

    public Double getKmStart3() {
        return kmStart3;
    }

    public void setKmStart3(Double kmStart3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart3 != null && !this.kmStart3.equals(kmStart3));
        this.kmStart3 = kmStart3;
    }

    public Double getKmStop3() {
        return kmStop3;
    }

    public void setKmStop3(Double kmStop3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop3 != null && !this.kmStop3.equals(kmStop3));
        this.kmStop3 = kmStop3;
    }

    public Timestamp getWorkFrom3() {
        return workFrom3;
    }

    public void setWorkFrom3(Timestamp workFrom3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom3 != null && !this.workFrom3.equals(workFrom3));
        this.workFrom3 = workFrom3;
    }

    public Timestamp getWorkTo3() {
        return workTo3;
    }

    public void setWorkTo3(Timestamp workTo3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo3 != null && !this.workTo3.equals(workTo3));
        this.workTo3 = workTo3;
    }

    public Timestamp getStandFrom3() {
        return standFrom3;
    }

    public void setStandFrom3(Timestamp standFrom3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom3 != null && !this.standFrom3.equals(standFrom3));
        this.standFrom3 = standFrom3;
    }

    public Timestamp getStandTo3() {
        return standTo3;
    }

    public void setStandTo3(Timestamp standTo3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo3 != null && !this.standTo3.equals(standTo3));
        this.standTo3 = standTo3;
    }

    public String getReason3() {
        return reason3;
    }

    public void setReason3(String reason3) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason3 != null && !this.reason3.equals(reason3));
        this.reason3 = reason3;
    }

    public Double getKmStart4() {
        return kmStart4;
    }

    public void setKmStart4(Double kmStart4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart4 != null && !this.kmStart4.equals(kmStart4));
        this.kmStart4 = kmStart4;
    }

    public Double getKmStop4() {
        return kmStop4;
    }

    public void setKmStop4(Double kmStop4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop4 != null && !this.kmStop4.equals(kmStop4));
        this.kmStop4 = kmStop4;
    }

    public Timestamp getWorkFrom4() {
        return workFrom4;
    }

    public void setWorkFrom4(Timestamp workFrom4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom4 != null && !this.workFrom4.equals(workFrom4));
        this.workFrom4 = workFrom4;
    }

    public Timestamp getWorkTo4() {
        return workTo4;
    }

    public void setWorkTo4(Timestamp workTo4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo4 != null && !this.workTo4.equals(workTo4));
        this.workTo4 = workTo4;
    }

    public Timestamp getStandFrom4() {
        return standFrom4;
    }

    public void setStandFrom4(Timestamp standFrom4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom4 != null && !this.standFrom4.equals(standFrom4));
        this.standFrom4 = standFrom4;
    }

    public Timestamp getStandTo4() {
        return standTo4;
    }

    public void setStandTo4(Timestamp standTo4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo4 != null && !this.standTo4.equals(standTo4));
        this.standTo4 = standTo4;
    }

    public String getReason4() {
        return reason4;
    }

    public void setReason4(String reason4) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason4 != null && !this.reason4.equals(reason4));
        this.reason4 = reason4;
    }

    public Double getKmStart5() {
        return kmStart5;
    }

    public void setKmStart5(Double kmStart5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart5 != null && !this.kmStart5.equals(kmStart5));
        this.kmStart5 = kmStart5;
    }

    public Double getKmStop5() {
        return kmStop5;
    }

    public void setKmStop5(Double kmStop5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop5 != null && !this.kmStop5.equals(kmStop5));
        this.kmStop5 = kmStop5;
    }

    public Timestamp getWorkFrom5() {
        return workFrom5;
    }

    public void setWorkFrom5(Timestamp workFrom5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom5 != null && !this.workFrom5.equals(workFrom5));
        this.workFrom5 = workFrom5;
    }

    public Timestamp getWorkTo5() {
        return workTo5;
    }

    public void setWorkTo5(Timestamp workTo5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo5 != null && !this.workTo5.equals(workTo5));
        this.workTo5 = workTo5;
    }

    public Timestamp getStandFrom5() {
        return standFrom5;
    }

    public void setStandFrom5(Timestamp standFrom5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom5 != null && !this.standFrom5.equals(standFrom5));
        this.standFrom5 = standFrom5;
    }

    public Timestamp getStandTo5() {
        return standTo5;
    }

    public void setStandTo5(Timestamp standTo5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo5 != null && !this.standTo5.equals(standTo5));
        this.standTo5 = standTo5;
    }

    public String getReason5() {
        return reason5;
    }

    public void setReason5(String reason5) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason5 != null && !this.reason5.equals(reason5));
        this.reason5 = reason5;
    }

    public Double getKmStart6() {
        return kmStart6;
    }

    public void setKmStart6(Double kmStart6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart6 != null && !this.kmStart6.equals(kmStart6));
        this.kmStart6 = kmStart6;
    }

    public Double getKmStop6() {
        return kmStop6;
    }

    public void setKmStop6(Double kmStop6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop6 != null && !this.kmStop6.equals(kmStop6));
        this.kmStop6 = kmStop6;
    }

    public Timestamp getWorkFrom6() {
        return workFrom6;
    }

    public void setWorkFrom6(Timestamp workFrom6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom6 != null && !this.workFrom6.equals(workFrom6));
        this.workFrom6 = workFrom6;
    }

    public Timestamp getWorkTo6() {
        return workTo6;
    }

    public void setWorkTo6(Timestamp workTo6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo6 != null && !this.workTo6.equals(workTo6));
        this.workTo6 = workTo6;
    }

    public Timestamp getStandFrom6() {
        return standFrom6;
    }

    public void setStandFrom6(Timestamp standFrom6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom6 != null && !this.standFrom6.equals(standFrom6));
        this.standFrom6 = standFrom6;
    }

    public Timestamp getStandTo6() {
        return standTo6;
    }

    public void setStandTo6(Timestamp standTo6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo6 != null && !this.standTo6.equals(standTo6));
        this.standTo6 = standTo6;
    }

    public String getReason6() {
        return reason6;
    }

    public void setReason6(String reason6) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason6 != null && !this.reason6.equals(reason6));
        this.reason6 = reason6;
    }

    public Double getKmStart7() {
        return kmStart7;
    }

    public void setKmStart7(Double kmStart7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStart7 != null && !this.kmStart7.equals(kmStart7));
        this.kmStart7 = kmStart7;
    }

    public Double getKmStop7() {
        return kmStop7;
    }

    public void setKmStop7(Double kmStop7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.kmStop7 != null && !this.kmStop7.equals(kmStop7));
        this.kmStop7 = kmStop7;
    }

    public Timestamp getWorkFrom7() {
        return workFrom7;
    }

    public void setWorkFrom7(Timestamp workFrom7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workFrom7 != null && !this.workFrom7.equals(workFrom7));
        this.workFrom7 = workFrom7;
    }

    public Timestamp getWorkTo7() {
        return workTo7;
    }

    public void setWorkTo7(Timestamp workTo7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.workTo7 != null && !this.workTo7.equals(workTo7));
        this.workTo7 = workTo7;
    }

    public Timestamp getStandFrom7() {
        return standFrom7;
    }

    public void setStandFrom7(Timestamp standFrom7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standFrom7 != null && !this.standFrom7.equals(standFrom7));
        this.standFrom7 = standFrom7;
    }

    public Timestamp getStandTo7() {
        return standTo7;
    }

    public void setStandTo7(Timestamp standTo7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.standTo7 != null && !this.standTo7.equals(standTo7));
        this.standTo7 = standTo7;
    }

    public String getReason7() {
        return reason7;
    }

    public void setReason7(String reason7) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.reason7 != null && !this.reason7.equals(reason7));
        this.reason7 = reason7;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[54];
        columnValues[0] = getXopclocksheetId();
        columnValues[1] = getXemployeeId();
        columnValues[2] = getXsiteId();
        columnValues[3] = getSheetDate();
        columnValues[4] = getXmachineId();
        columnValues[5] = getKmStart1();
        columnValues[6] = getKmStop1();
        columnValues[7] = getWorkFrom1();
        columnValues[8] = getWorkTo1();
        columnValues[9] = getStandFrom1();
        columnValues[10] = getStandTo1();
        columnValues[11] = getReason1();
        columnValues[12] = getKmStart2();
        columnValues[13] = getKmStop2();
        columnValues[14] = getWorkFrom2();
        columnValues[15] = getWorkTo2();
        columnValues[16] = getStandFrom2();
        columnValues[17] = getStandTo2();
        columnValues[18] = getReason2();
        columnValues[19] = getKmStart3();
        columnValues[20] = getKmStop3();
        columnValues[21] = getWorkFrom3();
        columnValues[22] = getWorkTo3();
        columnValues[23] = getStandFrom3();
        columnValues[24] = getStandTo3();
        columnValues[25] = getReason3();
        columnValues[26] = getKmStart4();
        columnValues[27] = getKmStop4();
        columnValues[28] = getWorkFrom4();
        columnValues[29] = getWorkTo4();
        columnValues[30] = getStandFrom4();
        columnValues[31] = getStandTo4();
        columnValues[32] = getReason4();
        columnValues[33] = getKmStart5();
        columnValues[34] = getKmStop5();
        columnValues[35] = getWorkFrom5();
        columnValues[36] = getWorkTo5();
        columnValues[37] = getStandFrom5();
        columnValues[38] = getStandTo5();
        columnValues[39] = getReason5();
        columnValues[40] = getKmStart6();
        columnValues[41] = getKmStop6();
        columnValues[42] = getWorkFrom6();
        columnValues[43] = getWorkTo6();
        columnValues[44] = getStandFrom6();
        columnValues[45] = getStandTo6();
        columnValues[46] = getReason6();
        columnValues[47] = getKmStart7();
        columnValues[48] = getKmStop7();
        columnValues[49] = getWorkFrom7();
        columnValues[50] = getWorkTo7();
        columnValues[51] = getStandFrom7();
        columnValues[52] = getStandTo7();
        columnValues[53] = getReason7();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXopclocksheetId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXopclocksheetId(null);
        }
        try {
            setXemployeeId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setXemployeeId(null);
        }
        try {
            setXsiteId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setXsiteId(null);
        }
        setSheetDate(toDate(flds[3]));
        try {
            setXmachineId(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setXmachineId(null);
        }
        try {
            setKmStart1(Double.parseDouble(flds[5]));
        } catch(NumberFormatException ne) {
            setKmStart1(null);
        }
        try {
            setKmStop1(Double.parseDouble(flds[6]));
        } catch(NumberFormatException ne) {
            setKmStop1(null);
        }
        setWorkFrom1(toTimeStamp(flds[7]));
        setWorkTo1(toTimeStamp(flds[8]));
        setStandFrom1(toTimeStamp(flds[9]));
        setStandTo1(toTimeStamp(flds[10]));
        setReason1(flds[11]);
        try {
            setKmStart2(Double.parseDouble(flds[12]));
        } catch(NumberFormatException ne) {
            setKmStart2(null);
        }
        try {
            setKmStop2(Double.parseDouble(flds[13]));
        } catch(NumberFormatException ne) {
            setKmStop2(null);
        }
        setWorkFrom2(toTimeStamp(flds[14]));
        setWorkTo2(toTimeStamp(flds[15]));
        setStandFrom2(toTimeStamp(flds[16]));
        setStandTo2(toTimeStamp(flds[17]));
        setReason2(flds[18]);
        try {
            setKmStart3(Double.parseDouble(flds[19]));
        } catch(NumberFormatException ne) {
            setKmStart3(null);
        }
        try {
            setKmStop3(Double.parseDouble(flds[20]));
        } catch(NumberFormatException ne) {
            setKmStop3(null);
        }
        setWorkFrom3(toTimeStamp(flds[21]));
        setWorkTo3(toTimeStamp(flds[22]));
        setStandFrom3(toTimeStamp(flds[23]));
        setStandTo3(toTimeStamp(flds[24]));
        setReason3(flds[25]);
        try {
            setKmStart4(Double.parseDouble(flds[26]));
        } catch(NumberFormatException ne) {
            setKmStart4(null);
        }
        try {
            setKmStop4(Double.parseDouble(flds[27]));
        } catch(NumberFormatException ne) {
            setKmStop4(null);
        }
        setWorkFrom4(toTimeStamp(flds[28]));
        setWorkTo4(toTimeStamp(flds[29]));
        setStandFrom4(toTimeStamp(flds[30]));
        setStandTo4(toTimeStamp(flds[31]));
        setReason4(flds[32]);
        try {
            setKmStart5(Double.parseDouble(flds[33]));
        } catch(NumberFormatException ne) {
            setKmStart5(null);
        }
        try {
            setKmStop5(Double.parseDouble(flds[34]));
        } catch(NumberFormatException ne) {
            setKmStop5(null);
        }
        setWorkFrom5(toTimeStamp(flds[35]));
        setWorkTo5(toTimeStamp(flds[36]));
        setStandFrom5(toTimeStamp(flds[37]));
        setStandTo5(toTimeStamp(flds[38]));
        setReason5(flds[39]);
        try {
            setKmStart6(Double.parseDouble(flds[40]));
        } catch(NumberFormatException ne) {
            setKmStart6(null);
        }
        try {
            setKmStop6(Double.parseDouble(flds[41]));
        } catch(NumberFormatException ne) {
            setKmStop6(null);
        }
        setWorkFrom6(toTimeStamp(flds[42]));
        setWorkTo6(toTimeStamp(flds[43]));
        setStandFrom6(toTimeStamp(flds[44]));
        setStandTo6(toTimeStamp(flds[45]));
        setReason6(flds[46]);
        try {
            setKmStart7(Double.parseDouble(flds[47]));
        } catch(NumberFormatException ne) {
            setKmStart7(null);
        }
        try {
            setKmStop7(Double.parseDouble(flds[48]));
        } catch(NumberFormatException ne) {
            setKmStop7(null);
        }
        setWorkFrom7(toTimeStamp(flds[49]));
        setWorkTo7(toTimeStamp(flds[50]));
        setStandFrom7(toTimeStamp(flds[51]));
        setStandTo7(toTimeStamp(flds[52]));
        setReason7(flds[53]);
    }
}
