// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Wed Nov 09 09:05:56 GMT 2011
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Boperator extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer profileId = null;
    private Integer clocksheets = null;
    private String clocknumber = null;
    private String contractnumber = null;
    private Integer loanAmount = null;
    private Integer loanBalance = null;
    private Integer loanRepayment = null;
    private Integer rate = null;
    private Integer monNormaltime = null;
    private Integer monOvertime = null;
    private Integer monDoubletime = null;
    private Integer tueNormaltime = null;
    private Integer tueOvertime = null;
    private Integer tueDoubletime = null;
    private Integer wenNormaltime = null;
    private Integer wenOvertime = null;
    private Integer wenDoubletime = null;
    private Integer thuNormaltime = null;
    private Integer thuOvertime = null;
    private Integer thuDoubletime = null;
    private Integer friNormaltime = null;
    private Integer friOvertime = null;
    private Integer friDoubletime = null;
    private Integer satNormaltime = null;
    private Integer satOvertime = null;
    private Integer satDoubletime = null;
    private Integer sunNormaltime = null;
    private Integer sunOvertime = null;
    private Integer sunDoubletime = null;
    private Integer totNormHours = null;
    private Integer totOvertime = null;
    private Integer totDoubletime = null;
    private Integer contractTerm = null;
    private Date contractStart = null;
    private Date contractEnd = null;

    public Boperator(Connection connection) {
        super(connection, "boperator", "profile_id");
        setColumnNames(new String[]{"profile_id", "clocksheets", "clocknumber", "contractnumber", "loan_amount", "loan_balance", "loan_repayment", "rate", "mon_normaltime", "mon_overtime", "mon_doubletime", "tue_normaltime", "tue_overtime", "tue_doubletime", "wen_normaltime", "wen_overtime", "wen_doubletime", "thu_normaltime", "thu_overtime", "thu_doubletime", "fri_normaltime", "fri_overtime", "fri_doubletime", "sat_normaltime", "sat_overtime", "sat_doubletime", "sun_normaltime", "sun_overtime", "sun_doubletime", "tot_norm_hours", "tot_overtime", "tot_doubletime", "contract_term", "contract_start", "contract_end"});
    }

    public Boperator(Connection connection, Integer profileId, Integer clocksheets, String clocknumber, String contractnumber, Integer loanAmount, Integer loanBalance, Integer loanRepayment, Integer rate, Integer monNormaltime, Integer monOvertime, Integer monDoubletime, Integer tueNormaltime, Integer tueOvertime, Integer tueDoubletime, Integer wenNormaltime, Integer wenOvertime, Integer wenDoubletime, Integer thuNormaltime, Integer thuOvertime, Integer thuDoubletime, Integer friNormaltime, Integer friOvertime, Integer friDoubletime, Integer satNormaltime, Integer satOvertime, Integer satDoubletime, Integer sunNormaltime, Integer sunOvertime, Integer sunDoubletime, Integer totNormHours, Integer totOvertime, Integer totDoubletime, Integer contractTerm, Date contractStart, Date contractEnd) {
        super(connection, "boperator", "profile_id");
        setNew(profileId.intValue() <= 0);
//        if (profileId.intValue() != 0) {
            this.profileId = profileId;
//        }
        this.clocksheets = clocksheets;
        this.clocknumber = clocknumber;
        this.contractnumber = contractnumber;
        this.loanAmount = loanAmount;
        this.loanBalance = loanBalance;
        this.loanRepayment = loanRepayment;
        this.rate = rate;
        this.monNormaltime = monNormaltime;
        this.monOvertime = monOvertime;
        this.monDoubletime = monDoubletime;
        this.tueNormaltime = tueNormaltime;
        this.tueOvertime = tueOvertime;
        this.tueDoubletime = tueDoubletime;
        this.wenNormaltime = wenNormaltime;
        this.wenOvertime = wenOvertime;
        this.wenDoubletime = wenDoubletime;
        this.thuNormaltime = thuNormaltime;
        this.thuOvertime = thuOvertime;
        this.thuDoubletime = thuDoubletime;
        this.friNormaltime = friNormaltime;
        this.friOvertime = friOvertime;
        this.friDoubletime = friDoubletime;
        this.satNormaltime = satNormaltime;
        this.satOvertime = satOvertime;
        this.satDoubletime = satDoubletime;
        this.sunNormaltime = sunNormaltime;
        this.sunOvertime = sunOvertime;
        this.sunDoubletime = sunDoubletime;
        this.totNormHours = totNormHours;
        this.totOvertime = totOvertime;
        this.totDoubletime = totDoubletime;
        this.contractTerm = contractTerm;
        this.contractStart = contractStart;
        this.contractEnd = contractEnd;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Boperator boperator = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT profile_id,clocksheets,clocknumber,contractnumber,loan_amount,loan_balance,loan_repayment,rate,mon_normaltime,mon_overtime,mon_doubletime,tue_normaltime,tue_overtime,tue_doubletime,wen_normaltime,wen_overtime,wen_doubletime,thu_normaltime,thu_overtime,thu_doubletime,fri_normaltime,fri_overtime,fri_doubletime,sat_normaltime,sat_overtime,sat_doubletime,sun_normaltime,sun_overtime,sun_doubletime,tot_norm_hours,tot_overtime,tot_doubletime,contract_term,contract_start,contract_end FROM boperator WHERE profile_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                boperator = new Boperator(getConnection());
                boperator.setProfileId(new Integer(rs.getInt(1)));
                boperator.setClocksheets(new Integer(rs.getInt(2)));
                boperator.setClocknumber(rs.getString(3));
                boperator.setContractnumber(rs.getString(4));
                boperator.setLoanAmount(new Integer(rs.getInt(5)));
                boperator.setLoanBalance(new Integer(rs.getInt(6)));
                boperator.setLoanRepayment(new Integer(rs.getInt(7)));
                boperator.setRate(new Integer(rs.getInt(8)));
                boperator.setMonNormaltime(new Integer(rs.getInt(9)));
                boperator.setMonOvertime(new Integer(rs.getInt(10)));
                boperator.setMonDoubletime(new Integer(rs.getInt(11)));
                boperator.setTueNormaltime(new Integer(rs.getInt(12)));
                boperator.setTueOvertime(new Integer(rs.getInt(13)));
                boperator.setTueDoubletime(new Integer(rs.getInt(14)));
                boperator.setWenNormaltime(new Integer(rs.getInt(15)));
                boperator.setWenOvertime(new Integer(rs.getInt(16)));
                boperator.setWenDoubletime(new Integer(rs.getInt(17)));
                boperator.setThuNormaltime(new Integer(rs.getInt(18)));
                boperator.setThuOvertime(new Integer(rs.getInt(19)));
                boperator.setThuDoubletime(new Integer(rs.getInt(20)));
                boperator.setFriNormaltime(new Integer(rs.getInt(21)));
                boperator.setFriOvertime(new Integer(rs.getInt(22)));
                boperator.setFriDoubletime(new Integer(rs.getInt(23)));
                boperator.setSatNormaltime(new Integer(rs.getInt(24)));
                boperator.setSatOvertime(new Integer(rs.getInt(25)));
                boperator.setSatDoubletime(new Integer(rs.getInt(26)));
                boperator.setSunNormaltime(new Integer(rs.getInt(27)));
                boperator.setSunOvertime(new Integer(rs.getInt(28)));
                boperator.setSunDoubletime(new Integer(rs.getInt(29)));
                boperator.setTotNormHours(new Integer(rs.getInt(30)));
                boperator.setTotOvertime(new Integer(rs.getInt(31)));
                boperator.setTotDoubletime(new Integer(rs.getInt(32)));
                boperator.setContractTerm(new Integer(rs.getInt(33)));
                boperator.setContractStart(rs.getDate(34));
                boperator.setContractEnd(rs.getDate(35));
                boperator.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return boperator;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO boperator ("+(getProfileId().intValue()!=0?"profile_id,":"")+"clocksheets,clocknumber,contractnumber,loan_amount,loan_balance,loan_repayment,rate,mon_normaltime,mon_overtime,mon_doubletime,tue_normaltime,tue_overtime,tue_doubletime,wen_normaltime,wen_overtime,wen_doubletime,thu_normaltime,thu_overtime,thu_doubletime,fri_normaltime,fri_overtime,fri_doubletime,sat_normaltime,sat_overtime,sat_doubletime,sun_normaltime,sun_overtime,sun_doubletime,tot_norm_hours,tot_overtime,tot_doubletime,contract_term,contract_start,contract_end) values("+(getProfileId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getProfileId().intValue()!=0) {
                 ps.setObject(++n, getProfileId());
             }
             ps.setObject(++n, getClocksheets());
             ps.setObject(++n, getClocknumber());
             ps.setObject(++n, getContractnumber());
             ps.setObject(++n, getLoanAmount());
             ps.setObject(++n, getLoanBalance());
             ps.setObject(++n, getLoanRepayment());
             ps.setObject(++n, getRate());
             ps.setObject(++n, getMonNormaltime());
             ps.setObject(++n, getMonOvertime());
             ps.setObject(++n, getMonDoubletime());
             ps.setObject(++n, getTueNormaltime());
             ps.setObject(++n, getTueOvertime());
             ps.setObject(++n, getTueDoubletime());
             ps.setObject(++n, getWenNormaltime());
             ps.setObject(++n, getWenOvertime());
             ps.setObject(++n, getWenDoubletime());
             ps.setObject(++n, getThuNormaltime());
             ps.setObject(++n, getThuOvertime());
             ps.setObject(++n, getThuDoubletime());
             ps.setObject(++n, getFriNormaltime());
             ps.setObject(++n, getFriOvertime());
             ps.setObject(++n, getFriDoubletime());
             ps.setObject(++n, getSatNormaltime());
             ps.setObject(++n, getSatOvertime());
             ps.setObject(++n, getSatDoubletime());
             ps.setObject(++n, getSunNormaltime());
             ps.setObject(++n, getSunOvertime());
             ps.setObject(++n, getSunDoubletime());
             ps.setObject(++n, getTotNormHours());
             ps.setObject(++n, getTotOvertime());
             ps.setObject(++n, getTotDoubletime());
             ps.setObject(++n, getContractTerm());
             ps.setObject(++n, getContractStart());
             ps.setObject(++n, getContractEnd());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getProfileId().intValue()==0) {
             stmt = "SELECT max(profile_id) FROM boperator";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setProfileId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE boperator " +
                    "SET clocksheets = ?, clocknumber = ?, contractnumber = ?, loan_amount = ?, loan_balance = ?, loan_repayment = ?, rate = ?, mon_normaltime = ?, mon_overtime = ?, mon_doubletime = ?, tue_normaltime = ?, tue_overtime = ?, tue_doubletime = ?, wen_normaltime = ?, wen_overtime = ?, wen_doubletime = ?, thu_normaltime = ?, thu_overtime = ?, thu_doubletime = ?, fri_normaltime = ?, fri_overtime = ?, fri_doubletime = ?, sat_normaltime = ?, sat_overtime = ?, sat_doubletime = ?, sun_normaltime = ?, sun_overtime = ?, sun_doubletime = ?, tot_norm_hours = ?, tot_overtime = ?, tot_doubletime = ?, contract_term = ?, contract_start = ?, contract_end = ?" + 
                    " WHERE profile_id = " + getProfileId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getClocksheets());
                ps.setObject(2, getClocknumber());
                ps.setObject(3, getContractnumber());
                ps.setObject(4, getLoanAmount());
                ps.setObject(5, getLoanBalance());
                ps.setObject(6, getLoanRepayment());
                ps.setObject(7, getRate());
                ps.setObject(8, getMonNormaltime());
                ps.setObject(9, getMonOvertime());
                ps.setObject(10, getMonDoubletime());
                ps.setObject(11, getTueNormaltime());
                ps.setObject(12, getTueOvertime());
                ps.setObject(13, getTueDoubletime());
                ps.setObject(14, getWenNormaltime());
                ps.setObject(15, getWenOvertime());
                ps.setObject(16, getWenDoubletime());
                ps.setObject(17, getThuNormaltime());
                ps.setObject(18, getThuOvertime());
                ps.setObject(19, getThuDoubletime());
                ps.setObject(20, getFriNormaltime());
                ps.setObject(21, getFriOvertime());
                ps.setObject(22, getFriDoubletime());
                ps.setObject(23, getSatNormaltime());
                ps.setObject(24, getSatOvertime());
                ps.setObject(25, getSatDoubletime());
                ps.setObject(26, getSunNormaltime());
                ps.setObject(27, getSunOvertime());
                ps.setObject(28, getSunDoubletime());
                ps.setObject(29, getTotNormHours());
                ps.setObject(30, getTotOvertime());
                ps.setObject(31, getTotDoubletime());
                ps.setObject(32, getContractTerm());
                ps.setObject(33, getContractStart());
                ps.setObject(34, getContractEnd());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM boperator " +
                "WHERE profile_id = " + getProfileId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setProfileId(new Integer(-getProfileId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getProfileId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT profile_id,clocksheets,clocknumber,contractnumber,loan_amount,loan_balance,loan_repayment,rate,mon_normaltime,mon_overtime,mon_doubletime,tue_normaltime,tue_overtime,tue_doubletime,wen_normaltime,wen_overtime,wen_doubletime,thu_normaltime,thu_overtime,thu_doubletime,fri_normaltime,fri_overtime,fri_doubletime,sat_normaltime,sat_overtime,sat_doubletime,sun_normaltime,sun_overtime,sun_doubletime,tot_norm_hours,tot_overtime,tot_doubletime,contract_term,contract_start,contract_end FROM boperator " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Boperator(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),rs.getString(3),rs.getString(4),new Integer(rs.getInt(5)),new Integer(rs.getInt(6)),new Integer(rs.getInt(7)),new Integer(rs.getInt(8)),new Integer(rs.getInt(9)),new Integer(rs.getInt(10)),new Integer(rs.getInt(11)),new Integer(rs.getInt(12)),new Integer(rs.getInt(13)),new Integer(rs.getInt(14)),new Integer(rs.getInt(15)),new Integer(rs.getInt(16)),new Integer(rs.getInt(17)),new Integer(rs.getInt(18)),new Integer(rs.getInt(19)),new Integer(rs.getInt(20)),new Integer(rs.getInt(21)),new Integer(rs.getInt(22)),new Integer(rs.getInt(23)),new Integer(rs.getInt(24)),new Integer(rs.getInt(25)),new Integer(rs.getInt(26)),new Integer(rs.getInt(27)),new Integer(rs.getInt(28)),new Integer(rs.getInt(29)),new Integer(rs.getInt(30)),new Integer(rs.getInt(31)),new Integer(rs.getInt(32)),new Integer(rs.getInt(33)),rs.getDate(34),rs.getDate(35)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Boperator[] objects = new Boperator[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Boperator boperator = (Boperator) lst.get(i);
            objects[i] = boperator;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT profile_id FROM boperator " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getProfileId() + getDelimiter();
    //}

    public Integer getProfileId() {
        return profileId;
    }

    public void setProfileId(Integer profileId) throws ForeignKeyViolationException {
        setWasChanged(this.profileId != null && this.profileId != profileId);
        this.profileId = profileId;
        setNew(profileId.intValue() == 0);
    }

    public Integer getClocksheets() {
        return clocksheets;
    }

    public void setClocksheets(Integer clocksheets) throws SQLException, ForeignKeyViolationException {
        if (null != clocksheets)
            clocksheets = clocksheets == 0 ? null : clocksheets;
        setWasChanged(this.clocksheets != null && !this.clocksheets.equals(clocksheets));
        this.clocksheets = clocksheets;
    }

    public String getClocknumber() {
        return clocknumber;
    }

    public void setClocknumber(String clocknumber) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.clocknumber != null && !this.clocknumber.equals(clocknumber));
        this.clocknumber = clocknumber;
    }

    public String getContractnumber() {
        return contractnumber;
    }

    public void setContractnumber(String contractnumber) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractnumber != null && !this.contractnumber.equals(contractnumber));
        this.contractnumber = contractnumber;
    }

    public Integer getLoanAmount() {
        return loanAmount;
    }

    public void setLoanAmount(Integer loanAmount) throws SQLException, ForeignKeyViolationException {
        if (null != loanAmount)
            loanAmount = loanAmount == 0 ? null : loanAmount;
        setWasChanged(this.loanAmount != null && !this.loanAmount.equals(loanAmount));
        this.loanAmount = loanAmount;
    }

    public Integer getLoanBalance() {
        return loanBalance;
    }

    public void setLoanBalance(Integer loanBalance) throws SQLException, ForeignKeyViolationException {
        if (null != loanBalance)
            loanBalance = loanBalance == 0 ? null : loanBalance;
        setWasChanged(this.loanBalance != null && !this.loanBalance.equals(loanBalance));
        this.loanBalance = loanBalance;
    }

    public Integer getLoanRepayment() {
        return loanRepayment;
    }

    public void setLoanRepayment(Integer loanRepayment) throws SQLException, ForeignKeyViolationException {
        if (null != loanRepayment)
            loanRepayment = loanRepayment == 0 ? null : loanRepayment;
        setWasChanged(this.loanRepayment != null && !this.loanRepayment.equals(loanRepayment));
        this.loanRepayment = loanRepayment;
    }

    public Integer getRate() {
        return rate;
    }

    public void setRate(Integer rate) throws SQLException, ForeignKeyViolationException {
        if (null != rate)
            rate = rate == 0 ? null : rate;
        setWasChanged(this.rate != null && !this.rate.equals(rate));
        this.rate = rate;
    }

    public Integer getMonNormaltime() {
        return monNormaltime;
    }

    public void setMonNormaltime(Integer monNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != monNormaltime)
            monNormaltime = monNormaltime == 0 ? null : monNormaltime;
        setWasChanged(this.monNormaltime != null && !this.monNormaltime.equals(monNormaltime));
        this.monNormaltime = monNormaltime;
    }

    public Integer getMonOvertime() {
        return monOvertime;
    }

    public void setMonOvertime(Integer monOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != monOvertime)
            monOvertime = monOvertime == 0 ? null : monOvertime;
        setWasChanged(this.monOvertime != null && !this.monOvertime.equals(monOvertime));
        this.monOvertime = monOvertime;
    }

    public Integer getMonDoubletime() {
        return monDoubletime;
    }

    public void setMonDoubletime(Integer monDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != monDoubletime)
            monDoubletime = monDoubletime == 0 ? null : monDoubletime;
        setWasChanged(this.monDoubletime != null && !this.monDoubletime.equals(monDoubletime));
        this.monDoubletime = monDoubletime;
    }

    public Integer getTueNormaltime() {
        return tueNormaltime;
    }

    public void setTueNormaltime(Integer tueNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != tueNormaltime)
            tueNormaltime = tueNormaltime == 0 ? null : tueNormaltime;
        setWasChanged(this.tueNormaltime != null && !this.tueNormaltime.equals(tueNormaltime));
        this.tueNormaltime = tueNormaltime;
    }

    public Integer getTueOvertime() {
        return tueOvertime;
    }

    public void setTueOvertime(Integer tueOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != tueOvertime)
            tueOvertime = tueOvertime == 0 ? null : tueOvertime;
        setWasChanged(this.tueOvertime != null && !this.tueOvertime.equals(tueOvertime));
        this.tueOvertime = tueOvertime;
    }

    public Integer getTueDoubletime() {
        return tueDoubletime;
    }

    public void setTueDoubletime(Integer tueDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != tueDoubletime)
            tueDoubletime = tueDoubletime == 0 ? null : tueDoubletime;
        setWasChanged(this.tueDoubletime != null && !this.tueDoubletime.equals(tueDoubletime));
        this.tueDoubletime = tueDoubletime;
    }

    public Integer getWenNormaltime() {
        return wenNormaltime;
    }

    public void setWenNormaltime(Integer wenNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != wenNormaltime)
            wenNormaltime = wenNormaltime == 0 ? null : wenNormaltime;
        setWasChanged(this.wenNormaltime != null && !this.wenNormaltime.equals(wenNormaltime));
        this.wenNormaltime = wenNormaltime;
    }

    public Integer getWenOvertime() {
        return wenOvertime;
    }

    public void setWenOvertime(Integer wenOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != wenOvertime)
            wenOvertime = wenOvertime == 0 ? null : wenOvertime;
        setWasChanged(this.wenOvertime != null && !this.wenOvertime.equals(wenOvertime));
        this.wenOvertime = wenOvertime;
    }

    public Integer getWenDoubletime() {
        return wenDoubletime;
    }

    public void setWenDoubletime(Integer wenDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != wenDoubletime)
            wenDoubletime = wenDoubletime == 0 ? null : wenDoubletime;
        setWasChanged(this.wenDoubletime != null && !this.wenDoubletime.equals(wenDoubletime));
        this.wenDoubletime = wenDoubletime;
    }

    public Integer getThuNormaltime() {
        return thuNormaltime;
    }

    public void setThuNormaltime(Integer thuNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != thuNormaltime)
            thuNormaltime = thuNormaltime == 0 ? null : thuNormaltime;
        setWasChanged(this.thuNormaltime != null && !this.thuNormaltime.equals(thuNormaltime));
        this.thuNormaltime = thuNormaltime;
    }

    public Integer getThuOvertime() {
        return thuOvertime;
    }

    public void setThuOvertime(Integer thuOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != thuOvertime)
            thuOvertime = thuOvertime == 0 ? null : thuOvertime;
        setWasChanged(this.thuOvertime != null && !this.thuOvertime.equals(thuOvertime));
        this.thuOvertime = thuOvertime;
    }

    public Integer getThuDoubletime() {
        return thuDoubletime;
    }

    public void setThuDoubletime(Integer thuDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != thuDoubletime)
            thuDoubletime = thuDoubletime == 0 ? null : thuDoubletime;
        setWasChanged(this.thuDoubletime != null && !this.thuDoubletime.equals(thuDoubletime));
        this.thuDoubletime = thuDoubletime;
    }

    public Integer getFriNormaltime() {
        return friNormaltime;
    }

    public void setFriNormaltime(Integer friNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != friNormaltime)
            friNormaltime = friNormaltime == 0 ? null : friNormaltime;
        setWasChanged(this.friNormaltime != null && !this.friNormaltime.equals(friNormaltime));
        this.friNormaltime = friNormaltime;
    }

    public Integer getFriOvertime() {
        return friOvertime;
    }

    public void setFriOvertime(Integer friOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != friOvertime)
            friOvertime = friOvertime == 0 ? null : friOvertime;
        setWasChanged(this.friOvertime != null && !this.friOvertime.equals(friOvertime));
        this.friOvertime = friOvertime;
    }

    public Integer getFriDoubletime() {
        return friDoubletime;
    }

    public void setFriDoubletime(Integer friDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != friDoubletime)
            friDoubletime = friDoubletime == 0 ? null : friDoubletime;
        setWasChanged(this.friDoubletime != null && !this.friDoubletime.equals(friDoubletime));
        this.friDoubletime = friDoubletime;
    }

    public Integer getSatNormaltime() {
        return satNormaltime;
    }

    public void setSatNormaltime(Integer satNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != satNormaltime)
            satNormaltime = satNormaltime == 0 ? null : satNormaltime;
        setWasChanged(this.satNormaltime != null && !this.satNormaltime.equals(satNormaltime));
        this.satNormaltime = satNormaltime;
    }

    public Integer getSatOvertime() {
        return satOvertime;
    }

    public void setSatOvertime(Integer satOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != satOvertime)
            satOvertime = satOvertime == 0 ? null : satOvertime;
        setWasChanged(this.satOvertime != null && !this.satOvertime.equals(satOvertime));
        this.satOvertime = satOvertime;
    }

    public Integer getSatDoubletime() {
        return satDoubletime;
    }

    public void setSatDoubletime(Integer satDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != satDoubletime)
            satDoubletime = satDoubletime == 0 ? null : satDoubletime;
        setWasChanged(this.satDoubletime != null && !this.satDoubletime.equals(satDoubletime));
        this.satDoubletime = satDoubletime;
    }

    public Integer getSunNormaltime() {
        return sunNormaltime;
    }

    public void setSunNormaltime(Integer sunNormaltime) throws SQLException, ForeignKeyViolationException {
        if (null != sunNormaltime)
            sunNormaltime = sunNormaltime == 0 ? null : sunNormaltime;
        setWasChanged(this.sunNormaltime != null && !this.sunNormaltime.equals(sunNormaltime));
        this.sunNormaltime = sunNormaltime;
    }

    public Integer getSunOvertime() {
        return sunOvertime;
    }

    public void setSunOvertime(Integer sunOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != sunOvertime)
            sunOvertime = sunOvertime == 0 ? null : sunOvertime;
        setWasChanged(this.sunOvertime != null && !this.sunOvertime.equals(sunOvertime));
        this.sunOvertime = sunOvertime;
    }

    public Integer getSunDoubletime() {
        return sunDoubletime;
    }

    public void setSunDoubletime(Integer sunDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != sunDoubletime)
            sunDoubletime = sunDoubletime == 0 ? null : sunDoubletime;
        setWasChanged(this.sunDoubletime != null && !this.sunDoubletime.equals(sunDoubletime));
        this.sunDoubletime = sunDoubletime;
    }

    public Integer getTotNormHours() {
        return totNormHours;
    }

    public void setTotNormHours(Integer totNormHours) throws SQLException, ForeignKeyViolationException {
        if (null != totNormHours)
            totNormHours = totNormHours == 0 ? null : totNormHours;
        setWasChanged(this.totNormHours != null && !this.totNormHours.equals(totNormHours));
        this.totNormHours = totNormHours;
    }

    public Integer getTotOvertime() {
        return totOvertime;
    }

    public void setTotOvertime(Integer totOvertime) throws SQLException, ForeignKeyViolationException {
        if (null != totOvertime)
            totOvertime = totOvertime == 0 ? null : totOvertime;
        setWasChanged(this.totOvertime != null && !this.totOvertime.equals(totOvertime));
        this.totOvertime = totOvertime;
    }

    public Integer getTotDoubletime() {
        return totDoubletime;
    }

    public void setTotDoubletime(Integer totDoubletime) throws SQLException, ForeignKeyViolationException {
        if (null != totDoubletime)
            totDoubletime = totDoubletime == 0 ? null : totDoubletime;
        setWasChanged(this.totDoubletime != null && !this.totDoubletime.equals(totDoubletime));
        this.totDoubletime = totDoubletime;
    }

    public Integer getContractTerm() {
        return contractTerm;
    }

    public void setContractTerm(Integer contractTerm) throws SQLException, ForeignKeyViolationException {
        if (null != contractTerm)
            contractTerm = contractTerm == 0 ? null : contractTerm;
        setWasChanged(this.contractTerm != null && !this.contractTerm.equals(contractTerm));
        this.contractTerm = contractTerm;
    }

    public Date getContractStart() {
        return contractStart;
    }

    public void setContractStart(Date contractStart) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractStart != null && !this.contractStart.equals(contractStart));
        this.contractStart = contractStart;
    }

    public Date getContractEnd() {
        return contractEnd;
    }

    public void setContractEnd(Date contractEnd) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractEnd != null && !this.contractEnd.equals(contractEnd));
        this.contractEnd = contractEnd;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[35];
        columnValues[0] = getProfileId();
        columnValues[1] = getClocksheets();
        columnValues[2] = getClocknumber();
        columnValues[3] = getContractnumber();
        columnValues[4] = getLoanAmount();
        columnValues[5] = getLoanBalance();
        columnValues[6] = getLoanRepayment();
        columnValues[7] = getRate();
        columnValues[8] = getMonNormaltime();
        columnValues[9] = getMonOvertime();
        columnValues[10] = getMonDoubletime();
        columnValues[11] = getTueNormaltime();
        columnValues[12] = getTueOvertime();
        columnValues[13] = getTueDoubletime();
        columnValues[14] = getWenNormaltime();
        columnValues[15] = getWenOvertime();
        columnValues[16] = getWenDoubletime();
        columnValues[17] = getThuNormaltime();
        columnValues[18] = getThuOvertime();
        columnValues[19] = getThuDoubletime();
        columnValues[20] = getFriNormaltime();
        columnValues[21] = getFriOvertime();
        columnValues[22] = getFriDoubletime();
        columnValues[23] = getSatNormaltime();
        columnValues[24] = getSatOvertime();
        columnValues[25] = getSatDoubletime();
        columnValues[26] = getSunNormaltime();
        columnValues[27] = getSunOvertime();
        columnValues[28] = getSunDoubletime();
        columnValues[29] = getTotNormHours();
        columnValues[30] = getTotOvertime();
        columnValues[31] = getTotDoubletime();
        columnValues[32] = getContractTerm();
        columnValues[33] = getContractStart();
        columnValues[34] = getContractEnd();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setProfileId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setProfileId(null);
        }
        try {
            setClocksheets(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setClocksheets(null);
        }
        setClocknumber(flds[2]);
        setContractnumber(flds[3]);
        try {
            setLoanAmount(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setLoanAmount(null);
        }
        try {
            setLoanBalance(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setLoanBalance(null);
        }
        try {
            setLoanRepayment(Integer.parseInt(flds[6]));
        } catch(NumberFormatException ne) {
            setLoanRepayment(null);
        }
        try {
            setRate(Integer.parseInt(flds[7]));
        } catch(NumberFormatException ne) {
            setRate(null);
        }
        try {
            setMonNormaltime(Integer.parseInt(flds[8]));
        } catch(NumberFormatException ne) {
            setMonNormaltime(null);
        }
        try {
            setMonOvertime(Integer.parseInt(flds[9]));
        } catch(NumberFormatException ne) {
            setMonOvertime(null);
        }
        try {
            setMonDoubletime(Integer.parseInt(flds[10]));
        } catch(NumberFormatException ne) {
            setMonDoubletime(null);
        }
        try {
            setTueNormaltime(Integer.parseInt(flds[11]));
        } catch(NumberFormatException ne) {
            setTueNormaltime(null);
        }
        try {
            setTueOvertime(Integer.parseInt(flds[12]));
        } catch(NumberFormatException ne) {
            setTueOvertime(null);
        }
        try {
            setTueDoubletime(Integer.parseInt(flds[13]));
        } catch(NumberFormatException ne) {
            setTueDoubletime(null);
        }
        try {
            setWenNormaltime(Integer.parseInt(flds[14]));
        } catch(NumberFormatException ne) {
            setWenNormaltime(null);
        }
        try {
            setWenOvertime(Integer.parseInt(flds[15]));
        } catch(NumberFormatException ne) {
            setWenOvertime(null);
        }
        try {
            setWenDoubletime(Integer.parseInt(flds[16]));
        } catch(NumberFormatException ne) {
            setWenDoubletime(null);
        }
        try {
            setThuNormaltime(Integer.parseInt(flds[17]));
        } catch(NumberFormatException ne) {
            setThuNormaltime(null);
        }
        try {
            setThuOvertime(Integer.parseInt(flds[18]));
        } catch(NumberFormatException ne) {
            setThuOvertime(null);
        }
        try {
            setThuDoubletime(Integer.parseInt(flds[19]));
        } catch(NumberFormatException ne) {
            setThuDoubletime(null);
        }
        try {
            setFriNormaltime(Integer.parseInt(flds[20]));
        } catch(NumberFormatException ne) {
            setFriNormaltime(null);
        }
        try {
            setFriOvertime(Integer.parseInt(flds[21]));
        } catch(NumberFormatException ne) {
            setFriOvertime(null);
        }
        try {
            setFriDoubletime(Integer.parseInt(flds[22]));
        } catch(NumberFormatException ne) {
            setFriDoubletime(null);
        }
        try {
            setSatNormaltime(Integer.parseInt(flds[23]));
        } catch(NumberFormatException ne) {
            setSatNormaltime(null);
        }
        try {
            setSatOvertime(Integer.parseInt(flds[24]));
        } catch(NumberFormatException ne) {
            setSatOvertime(null);
        }
        try {
            setSatDoubletime(Integer.parseInt(flds[25]));
        } catch(NumberFormatException ne) {
            setSatDoubletime(null);
        }
        try {
            setSunNormaltime(Integer.parseInt(flds[26]));
        } catch(NumberFormatException ne) {
            setSunNormaltime(null);
        }
        try {
            setSunOvertime(Integer.parseInt(flds[27]));
        } catch(NumberFormatException ne) {
            setSunOvertime(null);
        }
        try {
            setSunDoubletime(Integer.parseInt(flds[28]));
        } catch(NumberFormatException ne) {
            setSunDoubletime(null);
        }
        try {
            setTotNormHours(Integer.parseInt(flds[29]));
        } catch(NumberFormatException ne) {
            setTotNormHours(null);
        }
        try {
            setTotOvertime(Integer.parseInt(flds[30]));
        } catch(NumberFormatException ne) {
            setTotOvertime(null);
        }
        try {
            setTotDoubletime(Integer.parseInt(flds[31]));
        } catch(NumberFormatException ne) {
            setTotDoubletime(null);
        }
        try {
            setContractTerm(Integer.parseInt(flds[32]));
        } catch(NumberFormatException ne) {
            setContractTerm(null);
        }
        setContractStart(toDate(flds[33]));
        setContractEnd(toDate(flds[34]));
    }
}
