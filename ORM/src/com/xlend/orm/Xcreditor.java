// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Jan 28 13:08:28 EET 2012
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xcreditor extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xcreditorId = null;
    private Integer xsupplierId = null;
    private Integer xconsumeId = null;
    private String accnum = null;
    private Double invoiceammount = null;
    private Integer paid = null;
    private Date purchased = null;
    private Integer paidfrom = null;

    public Xcreditor(Connection connection) {
        super(connection, "xcreditor", "xcreditor_id");
        setColumnNames(new String[]{"xcreditor_id", "xsupplier_id", "xconsume_id", "accnum", "invoiceammount", "paid", "purchased", "paidfrom"});
    }

    public Xcreditor(Connection connection, Integer xcreditorId, Integer xsupplierId, Integer xconsumeId, String accnum, Double invoiceammount, Integer paid, Date purchased, Integer paidfrom) {
        super(connection, "xcreditor", "xcreditor_id");
        setNew(xcreditorId.intValue() <= 0);
//        if (xcreditorId.intValue() != 0) {
            this.xcreditorId = xcreditorId;
//        }
        this.xsupplierId = xsupplierId;
        this.xconsumeId = xconsumeId;
        this.accnum = accnum;
        this.invoiceammount = invoiceammount;
        this.paid = paid;
        this.purchased = purchased;
        this.paidfrom = paidfrom;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xcreditor xcreditor = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcreditor_id,xsupplier_id,xconsume_id,accnum,invoiceammount,paid,purchased,paidfrom FROM xcreditor WHERE xcreditor_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xcreditor = new Xcreditor(getConnection());
                xcreditor.setXcreditorId(new Integer(rs.getInt(1)));
                xcreditor.setXsupplierId(new Integer(rs.getInt(2)));
                xcreditor.setXconsumeId(new Integer(rs.getInt(3)));
                xcreditor.setAccnum(rs.getString(4));
                xcreditor.setInvoiceammount(rs.getDouble(5));
                xcreditor.setPaid(new Integer(rs.getInt(6)));
                xcreditor.setPurchased(rs.getDate(7));
                xcreditor.setPaidfrom(new Integer(rs.getInt(8)));
                xcreditor.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xcreditor;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xcreditor ("+(getXcreditorId().intValue()!=0?"xcreditor_id,":"")+"xsupplier_id,xconsume_id,accnum,invoiceammount,paid,purchased,paidfrom) values("+(getXcreditorId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXcreditorId().intValue()!=0) {
                 ps.setObject(++n, getXcreditorId());
             }
             ps.setObject(++n, getXsupplierId());
             ps.setObject(++n, getXconsumeId());
             ps.setObject(++n, getAccnum());
             ps.setObject(++n, getInvoiceammount());
             ps.setObject(++n, getPaid());
             ps.setObject(++n, getPurchased());
             ps.setObject(++n, getPaidfrom());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXcreditorId().intValue()==0) {
             stmt = "SELECT max(xcreditor_id) FROM xcreditor";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXcreditorId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xcreditor " +
                    "SET xsupplier_id = ?, xconsume_id = ?, accnum = ?, invoiceammount = ?, paid = ?, purchased = ?, paidfrom = ?" + 
                    " WHERE xcreditor_id = " + getXcreditorId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getXsupplierId());
                ps.setObject(2, getXconsumeId());
                ps.setObject(3, getAccnum());
                ps.setObject(4, getInvoiceammount());
                ps.setObject(5, getPaid());
                ps.setObject(6, getPurchased());
                ps.setObject(7, getPaidfrom());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xcreditor " +
                "WHERE xcreditor_id = " + getXcreditorId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXcreditorId(new Integer(-getXcreditorId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXcreditorId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcreditor_id,xsupplier_id,xconsume_id,accnum,invoiceammount,paid,purchased,paidfrom FROM xcreditor " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xcreditor(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3)),rs.getString(4),rs.getDouble(5),new Integer(rs.getInt(6)),rs.getDate(7),new Integer(rs.getInt(8))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xcreditor[] objects = new Xcreditor[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xcreditor xcreditor = (Xcreditor) lst.get(i);
            objects[i] = xcreditor;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcreditor_id FROM xcreditor " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXcreditorId() + getDelimiter();
    //}

    public Integer getXcreditorId() {
        return xcreditorId;
    }

    public void setXcreditorId(Integer xcreditorId) throws ForeignKeyViolationException {
        setWasChanged(this.xcreditorId != null && this.xcreditorId != xcreditorId);
        this.xcreditorId = xcreditorId;
        setNew(xcreditorId.intValue() == 0);
    }

    public Integer getXsupplierId() {
        return xsupplierId;
    }

    public void setXsupplierId(Integer xsupplierId) throws SQLException, ForeignKeyViolationException {
        if (xsupplierId!=null && !Xsupplier.exists(getConnection(),"xsupplier_id = " + xsupplierId)) {
            throw new ForeignKeyViolationException("Can't set xsupplier_id, foreign key violation: xcreditor_xsupplier_fk");
        }
        setWasChanged(this.xsupplierId != null && !this.xsupplierId.equals(xsupplierId));
        this.xsupplierId = xsupplierId;
    }

    public Integer getXconsumeId() {
        return xconsumeId;
    }

    public void setXconsumeId(Integer xconsumeId) throws SQLException, ForeignKeyViolationException {
        if (null != xconsumeId)
            xconsumeId = xconsumeId == 0 ? null : xconsumeId;
        if (xconsumeId!=null && !Xconsume.exists(getConnection(),"xconsume_id = " + xconsumeId)) {
            throw new ForeignKeyViolationException("Can't set xconsume_id, foreign key violation: xcreditor_xconsume_fk");
        }
        setWasChanged(this.xconsumeId != null && !this.xconsumeId.equals(xconsumeId));
        this.xconsumeId = xconsumeId;
    }

    public String getAccnum() {
        return accnum;
    }

    public void setAccnum(String accnum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.accnum != null && !this.accnum.equals(accnum));
        this.accnum = accnum;
    }

    public Double getInvoiceammount() {
        return invoiceammount;
    }

    public void setInvoiceammount(Double invoiceammount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.invoiceammount != null && !this.invoiceammount.equals(invoiceammount));
        this.invoiceammount = invoiceammount;
    }

    public Integer getPaid() {
        return paid;
    }

    public void setPaid(Integer paid) throws SQLException, ForeignKeyViolationException {
        if (null != paid)
            paid = paid == 0 ? null : paid;
        setWasChanged(this.paid != null && !this.paid.equals(paid));
        this.paid = paid;
    }

    public Date getPurchased() {
        return purchased;
    }

    public void setPurchased(Date purchased) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.purchased != null && !this.purchased.equals(purchased));
        this.purchased = purchased;
    }

    public Integer getPaidfrom() {
        return paidfrom;
    }

    public void setPaidfrom(Integer paidfrom) throws SQLException, ForeignKeyViolationException {
        if (null != paidfrom)
            paidfrom = paidfrom == 0 ? null : paidfrom;
        setWasChanged(this.paidfrom != null && !this.paidfrom.equals(paidfrom));
        this.paidfrom = paidfrom;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[8];
        columnValues[0] = getXcreditorId();
        columnValues[1] = getXsupplierId();
        columnValues[2] = getXconsumeId();
        columnValues[3] = getAccnum();
        columnValues[4] = getInvoiceammount();
        columnValues[5] = getPaid();
        columnValues[6] = getPurchased();
        columnValues[7] = getPaidfrom();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXcreditorId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXcreditorId(null);
        }
        try {
            setXsupplierId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setXsupplierId(null);
        }
        try {
            setXconsumeId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setXconsumeId(null);
        }
        setAccnum(flds[3]);
        try {
            setInvoiceammount(Double.parseDouble(flds[4]));
        } catch(NumberFormatException ne) {
            setInvoiceammount(null);
        }
        try {
            setPaid(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setPaid(null);
        }
        setPurchased(toDate(flds[6]));
        try {
            setPaidfrom(Integer.parseInt(flds[7]));
        } catch(NumberFormatException ne) {
            setPaidfrom(null);
        }
    }
}
