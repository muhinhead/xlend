// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Thu Mar 14 10:11:38 EET 2013
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Employeeshort extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xemployeeId = null;
    private String clockNum = null;
    private String firstName = null;
    private String surName = null;
    private String nickName = null;
    private Integer xpositionId = null;

    public Employeeshort(Connection connection) {
        super(connection, "employeeshort", "xemployee_id");
        setColumnNames(new String[]{"xemployee_id", "clock_num", "first_name", "sur_name", "nick_name", "xposition_id"});
    }

    public Employeeshort(Connection connection, Integer xemployeeId, String clockNum, String firstName, String surName, String nickName, Integer xpositionId) {
        super(connection, "employeeshort", "xemployee_id");
        setNew(xemployeeId.intValue() <= 0);
//        if (xemployeeId.intValue() != 0) {
            this.xemployeeId = xemployeeId;
//        }
        this.clockNum = clockNum;
        this.firstName = firstName;
        this.surName = surName;
        this.nickName = nickName;
        this.xpositionId = xpositionId;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Employeeshort employeeshort = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployee_id,clock_num,first_name,sur_name,nick_name,xposition_id  FROM xemployee WHERE xemployee_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                employeeshort = new Employeeshort(getConnection());
                employeeshort.setXemployeeId(new Integer(rs.getInt(1)));
                employeeshort.setClockNum(rs.getString(2));
                employeeshort.setFirstName(rs.getString(3));
                employeeshort.setSurName(rs.getString(4));
                employeeshort.setNickName(rs.getString(5));
                employeeshort.setXpositionId(new Integer(rs.getInt(6)));
                employeeshort.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return employeeshort;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xemployee ("+(getXemployeeId().intValue()!=0?"xemployee_id,":"")+"clock_num,first_name,sur_name,nick_name,xposition_id) values("+(getXemployeeId().intValue()!=0?"?,":"")+"?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXemployeeId().intValue()!=0) {
                 ps.setObject(++n, getXemployeeId());
             }
             ps.setObject(++n, getClockNum());
             ps.setObject(++n, getFirstName());
             ps.setObject(++n, getSurName());
             ps.setObject(++n, getNickName());
             ps.setObject(++n, getXpositionId());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXemployeeId().intValue()==0) {
             stmt = "SELECT max(xemployee_id)  FROM xemployee";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXemployeeId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xemployee " +
                    "SET clock_num = ?, first_name = ?, sur_name = ?, nick_name = ?, xposition_id = ?" + 
                    " WHERE xemployee_id = " + getXemployeeId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getClockNum());
                ps.setObject(2, getFirstName());
                ps.setObject(3, getSurName());
                ps.setObject(4, getNickName());
                ps.setObject(5, getXpositionId());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xemployee " +
                "WHERE xemployee_id = " + getXemployeeId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXemployeeId(new Integer(-getXemployeeId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXemployeeId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployee_id,clock_num,first_name,sur_name,nick_name,xposition_id  FROM xemployee " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Employeeshort(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),new Integer(rs.getInt(6))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Employeeshort[] objects = new Employeeshort[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Employeeshort employeeshort = (Employeeshort) lst.get(i);
            objects[i] = employeeshort;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xemployee_id  FROM xemployee " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXemployeeId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xemployeeId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXemployeeId(id);
        setNew(prevIsNew);
    }

    public Integer getXemployeeId() {
        return xemployeeId;
    }

    public void setXemployeeId(Integer xemployeeId) throws ForeignKeyViolationException {
        setWasChanged(this.xemployeeId != null && this.xemployeeId != xemployeeId);
        this.xemployeeId = xemployeeId;
        setNew(xemployeeId.intValue() == 0);
    }

    public String getClockNum() {
        return clockNum;
    }

    public void setClockNum(String clockNum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.clockNum != null && !this.clockNum.equals(clockNum));
        this.clockNum = clockNum;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.firstName != null && !this.firstName.equals(firstName));
        this.firstName = firstName;
    }

    public String getSurName() {
        return surName;
    }

    public void setSurName(String surName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.surName != null && !this.surName.equals(surName));
        this.surName = surName;
    }

    public String getNickName() {
        return nickName;
    }

    public void setNickName(String nickName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.nickName != null && !this.nickName.equals(nickName));
        this.nickName = nickName;
    }

    public Integer getXpositionId() {
        return xpositionId;
    }

    public void setXpositionId(Integer xpositionId) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.xpositionId != null && !this.xpositionId.equals(xpositionId));
        this.xpositionId = xpositionId;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[6];
        columnValues[0] = getXemployeeId();
        columnValues[1] = getClockNum();
        columnValues[2] = getFirstName();
        columnValues[3] = getSurName();
        columnValues[4] = getNickName();
        columnValues[5] = getXpositionId();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXemployeeId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXemployeeId(null);
        }
        setClockNum(flds[1]);
        setFirstName(flds[2]);
        setSurName(flds[3]);
        setNickName(flds[4]);
        try {
            setXpositionId(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setXpositionId(null);
        }
    }
}
