// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Mon Jan 27 20:21:30 FET 2014
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xcashdrawn extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xcashdrawnId = null;
    private Timestamp curDate = null;
    private Double cashDrawn = null;
    private Double addMonies = null;
    private Double balance = null;
    private String notes = null;

    public Xcashdrawn(Connection connection) {
        super(connection, "xcashdrawn", "xcashdrawn_id");
        setColumnNames(new String[]{"xcashdrawn_id", "cur_date", "cash_drawn", "add_monies", "balance", "notes"});
    }

    public Xcashdrawn(Connection connection, Integer xcashdrawnId, Timestamp curDate, Double cashDrawn, Double addMonies, Double balance, String notes) {
        super(connection, "xcashdrawn", "xcashdrawn_id");
        setNew(xcashdrawnId.intValue() <= 0);
//        if (xcashdrawnId.intValue() != 0) {
            this.xcashdrawnId = xcashdrawnId;
//        }
        this.curDate = curDate;
        this.cashDrawn = cashDrawn;
        this.addMonies = addMonies;
        this.balance = balance;
        this.notes = notes;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xcashdrawn xcashdrawn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcashdrawn_id,cur_date,cash_drawn,add_monies,balance,notes FROM xcashdrawn WHERE xcashdrawn_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xcashdrawn = new Xcashdrawn(getConnection());
                xcashdrawn.setXcashdrawnId(new Integer(rs.getInt(1)));
                xcashdrawn.setCurDate(rs.getTimestamp(2));
                xcashdrawn.setCashDrawn(rs.getDouble(3));
                xcashdrawn.setAddMonies(rs.getDouble(4));
                xcashdrawn.setBalance(rs.getDouble(5));
                xcashdrawn.setNotes(rs.getString(6));
                xcashdrawn.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xcashdrawn;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xcashdrawn ("+(getXcashdrawnId().intValue()!=0?"xcashdrawn_id,":"")+"cur_date,cash_drawn,add_monies,balance,notes) values("+(getXcashdrawnId().intValue()!=0?"?,":"")+"?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXcashdrawnId().intValue()!=0) {
                 ps.setObject(++n, getXcashdrawnId());
             }
             ps.setObject(++n, getCurDate());
             ps.setObject(++n, getCashDrawn());
             ps.setObject(++n, getAddMonies());
             ps.setObject(++n, getBalance());
             ps.setObject(++n, getNotes());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXcashdrawnId().intValue()==0) {
             stmt = "SELECT max(xcashdrawn_id) FROM xcashdrawn";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXcashdrawnId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xcashdrawn " +
                    "SET cur_date = ?, cash_drawn = ?, add_monies = ?, balance = ?, notes = ?" + 
                    " WHERE xcashdrawn_id = " + getXcashdrawnId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getCurDate());
                ps.setObject(2, getCashDrawn());
                ps.setObject(3, getAddMonies());
                ps.setObject(4, getBalance());
                ps.setObject(5, getNotes());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xcashdrawn " +
                "WHERE xcashdrawn_id = " + getXcashdrawnId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXcashdrawnId(new Integer(-getXcashdrawnId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXcashdrawnId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcashdrawn_id,cur_date,cash_drawn,add_monies,balance,notes FROM xcashdrawn " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xcashdrawn(con,new Integer(rs.getInt(1)),rs.getTimestamp(2),rs.getDouble(3),rs.getDouble(4),rs.getDouble(5),rs.getString(6)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xcashdrawn[] objects = new Xcashdrawn[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xcashdrawn xcashdrawn = (Xcashdrawn) lst.get(i);
            objects[i] = xcashdrawn;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xcashdrawn_id FROM xcashdrawn " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXcashdrawnId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xcashdrawnId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXcashdrawnId(id);
        setNew(prevIsNew);
    }

    public Integer getXcashdrawnId() {
        return xcashdrawnId;
    }

    public void setXcashdrawnId(Integer xcashdrawnId) throws ForeignKeyViolationException {
        setWasChanged(this.xcashdrawnId != null && this.xcashdrawnId != xcashdrawnId);
        this.xcashdrawnId = xcashdrawnId;
        setNew(xcashdrawnId.intValue() == 0);
    }

    public Timestamp getCurDate() {
        return curDate;
    }

    public void setCurDate(Timestamp curDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.curDate != null && !this.curDate.equals(curDate));
        this.curDate = curDate;
    }

    public Double getCashDrawn() {
        return cashDrawn;
    }

    public void setCashDrawn(Double cashDrawn) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.cashDrawn != null && !this.cashDrawn.equals(cashDrawn));
        this.cashDrawn = cashDrawn;
    }

    public Double getAddMonies() {
        return addMonies;
    }

    public void setAddMonies(Double addMonies) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.addMonies != null && !this.addMonies.equals(addMonies));
        this.addMonies = addMonies;
    }

    public Double getBalance() {
        return balance;
    }

    public void setBalance(Double balance) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.balance != null && !this.balance.equals(balance));
        this.balance = balance;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.notes != null && !this.notes.equals(notes));
        this.notes = notes;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[6];
        columnValues[0] = getXcashdrawnId();
        columnValues[1] = getCurDate();
        columnValues[2] = getCashDrawn();
        columnValues[3] = getAddMonies();
        columnValues[4] = getBalance();
        columnValues[5] = getNotes();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXcashdrawnId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXcashdrawnId(null);
        }
        setCurDate(toTimeStamp(flds[1]));
        try {
            setCashDrawn(Double.parseDouble(flds[2]));
        } catch(NumberFormatException ne) {
            setCashDrawn(null);
        }
        try {
            setAddMonies(Double.parseDouble(flds[3]));
        } catch(NumberFormatException ne) {
            setAddMonies(null);
        }
        try {
            setBalance(Double.parseDouble(flds[4]));
        } catch(NumberFormatException ne) {
            setBalance(null);
        }
        setNotes(flds[5]);
    }
}
