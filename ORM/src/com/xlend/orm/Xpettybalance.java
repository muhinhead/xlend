// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Thu Sep 19 11:57:02 FET 2013
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xpettybalance extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xpettybalanceId = null;
    private Date curdate = null;
    private Double inAmount = null;
    private Double outAmount = null;

    public Xpettybalance(Connection connection) {
        super(connection, "xpettybalance", "xpettybalance_id");
        setColumnNames(new String[]{"xpettybalance_id", "curdate", "in_amount", "out_amount"});
    }

    public Xpettybalance(Connection connection, Integer xpettybalanceId, Date curdate, Double inAmount, Double outAmount) {
        super(connection, "xpettybalance", "xpettybalance_id");
        setNew(xpettybalanceId.intValue() <= 0);
//        if (xpettybalanceId.intValue() != 0) {
            this.xpettybalanceId = xpettybalanceId;
//        }
        this.curdate = curdate;
        this.inAmount = inAmount;
        this.outAmount = outAmount;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xpettybalance xpettybalance = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xpettybalance_id,curdate,in_amount,out_amount FROM xpettybalance WHERE xpettybalance_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xpettybalance = new Xpettybalance(getConnection());
                xpettybalance.setXpettybalanceId(new Integer(rs.getInt(1)));
                xpettybalance.setCurdate(rs.getDate(2));
                xpettybalance.setInAmount(rs.getDouble(3));
                xpettybalance.setOutAmount(rs.getDouble(4));
                xpettybalance.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xpettybalance;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xpettybalance ("+(getXpettybalanceId().intValue()!=0?"xpettybalance_id,":"")+"curdate,in_amount,out_amount) values("+(getXpettybalanceId().intValue()!=0?"?,":"")+"?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXpettybalanceId().intValue()!=0) {
                 ps.setObject(++n, getXpettybalanceId());
             }
             ps.setObject(++n, getCurdate());
             ps.setObject(++n, getInAmount());
             ps.setObject(++n, getOutAmount());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXpettybalanceId().intValue()==0) {
             stmt = "SELECT max(xpettybalance_id) FROM xpettybalance";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXpettybalanceId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xpettybalance " +
                    "SET curdate = ?, in_amount = ?, out_amount = ?" + 
                    " WHERE xpettybalance_id = " + getXpettybalanceId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getCurdate());
                ps.setObject(2, getInAmount());
                ps.setObject(3, getOutAmount());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xpettybalance " +
                "WHERE xpettybalance_id = " + getXpettybalanceId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXpettybalanceId(new Integer(-getXpettybalanceId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXpettybalanceId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xpettybalance_id,curdate,in_amount,out_amount FROM xpettybalance " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xpettybalance(con,new Integer(rs.getInt(1)),rs.getDate(2),rs.getDouble(3),rs.getDouble(4)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xpettybalance[] objects = new Xpettybalance[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xpettybalance xpettybalance = (Xpettybalance) lst.get(i);
            objects[i] = xpettybalance;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xpettybalance_id FROM xpettybalance " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXpettybalanceId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xpettybalanceId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXpettybalanceId(id);
        setNew(prevIsNew);
    }

    public Integer getXpettybalanceId() {
        return xpettybalanceId;
    }

    public void setXpettybalanceId(Integer xpettybalanceId) throws ForeignKeyViolationException {
        setWasChanged(this.xpettybalanceId != null && this.xpettybalanceId != xpettybalanceId);
        this.xpettybalanceId = xpettybalanceId;
        setNew(xpettybalanceId.intValue() == 0);
    }

    public Date getCurdate() {
        return curdate;
    }

    public void setCurdate(Date curdate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.curdate != null && !this.curdate.equals(curdate));
        this.curdate = curdate;
    }

    public Double getInAmount() {
        return inAmount;
    }

    public void setInAmount(Double inAmount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.inAmount != null && !this.inAmount.equals(inAmount));
        this.inAmount = inAmount;
    }

    public Double getOutAmount() {
        return outAmount;
    }

    public void setOutAmount(Double outAmount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.outAmount != null && !this.outAmount.equals(outAmount));
        this.outAmount = outAmount;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[4];
        columnValues[0] = getXpettybalanceId();
        columnValues[1] = getCurdate();
        columnValues[2] = getInAmount();
        columnValues[3] = getOutAmount();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXpettybalanceId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXpettybalanceId(null);
        }
        setCurdate(toDate(flds[1]));
        try {
            setInAmount(Double.parseDouble(flds[2]));
        } catch(NumberFormatException ne) {
            setInAmount(null);
        }
        try {
            setOutAmount(Double.parseDouble(flds[3]));
        } catch(NumberFormatException ne) {
            setOutAmount(null);
        }
    }
}
