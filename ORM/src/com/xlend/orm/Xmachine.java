// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Thu Sep 12 08:40:41 FET 2013
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xmachine extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xmachineId = null;
    private String tmvnr = null;
    private Integer xmachtypeId = null;
    private Integer xmachtype2Id = null;
    private String regNr = null;
    private Date expdate = null;
    private String vehicleidNr = null;
    private String engineNr = null;
    private String chassisNr = null;
    private String classify = null;
    private String insuranceNr = null;
    private String insuranceTp = null;
    private Double insuranceAmt = null;
    private Double depositAmt = null;
    private Integer contractFee = null;
    private Integer monthlyPay = null;
    private Date paystart = null;
    private Date payend = null;
    private Object photo = null;
    private Integer consumption = null;
    private Integer fueltype = null;

    public Xmachine(Connection connection) {
        super(connection, "xmachine", "xmachine_id");
        setColumnNames(new String[]{"xmachine_id", "tmvnr", "xmachtype_id", "xmachtype2_id", "reg_nr", "expdate", "vehicleid_nr", "engine_nr", "chassis_nr", "classify", "insurance_nr", "insurance_tp", "insurance_amt", "deposit_amt", "contract_fee", "monthly_pay", "paystart", "payend", "photo", "consumption", "fueltype"});
    }

    public Xmachine(Connection connection, Integer xmachineId, String tmvnr, Integer xmachtypeId, Integer xmachtype2Id, String regNr, Date expdate, String vehicleidNr, String engineNr, String chassisNr, String classify, String insuranceNr, String insuranceTp, Double insuranceAmt, Double depositAmt, Integer contractFee, Integer monthlyPay, Date paystart, Date payend, Object photo, Integer consumption, Integer fueltype) {
        super(connection, "xmachine", "xmachine_id");
        setNew(xmachineId.intValue() <= 0);
//        if (xmachineId.intValue() != 0) {
            this.xmachineId = xmachineId;
//        }
        this.tmvnr = tmvnr;
        this.xmachtypeId = xmachtypeId;
        this.xmachtype2Id = xmachtype2Id;
        this.regNr = regNr;
        this.expdate = expdate;
        this.vehicleidNr = vehicleidNr;
        this.engineNr = engineNr;
        this.chassisNr = chassisNr;
        this.classify = classify;
        this.insuranceNr = insuranceNr;
        this.insuranceTp = insuranceTp;
        this.insuranceAmt = insuranceAmt;
        this.depositAmt = depositAmt;
        this.contractFee = contractFee;
        this.monthlyPay = monthlyPay;
        this.paystart = paystart;
        this.payend = payend;
        this.photo = photo;
        this.consumption = consumption;
        this.fueltype = fueltype;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xmachine xmachine = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachine_id,tmvnr,xmachtype_id,xmachtype2_id,reg_nr,expdate,vehicleid_nr,engine_nr,chassis_nr,classify,insurance_nr,insurance_tp,insurance_amt,deposit_amt,contract_fee,monthly_pay,paystart,payend,photo,consumption,fueltype FROM xmachine WHERE xmachine_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xmachine = new Xmachine(getConnection());
                xmachine.setXmachineId(new Integer(rs.getInt(1)));
                xmachine.setTmvnr(rs.getString(2));
                xmachine.setXmachtypeId(new Integer(rs.getInt(3)));
                xmachine.setXmachtype2Id(new Integer(rs.getInt(4)));
                xmachine.setRegNr(rs.getString(5));
                xmachine.setExpdate(rs.getDate(6));
                xmachine.setVehicleidNr(rs.getString(7));
                xmachine.setEngineNr(rs.getString(8));
                xmachine.setChassisNr(rs.getString(9));
                xmachine.setClassify(rs.getString(10));
                xmachine.setInsuranceNr(rs.getString(11));
                xmachine.setInsuranceTp(rs.getString(12));
                xmachine.setInsuranceAmt(rs.getDouble(13));
                xmachine.setDepositAmt(rs.getDouble(14));
                xmachine.setContractFee(new Integer(rs.getInt(15)));
                xmachine.setMonthlyPay(new Integer(rs.getInt(16)));
                xmachine.setPaystart(rs.getDate(17));
                xmachine.setPayend(rs.getDate(18));
                xmachine.setPhoto(rs.getObject(19));
                xmachine.setConsumption(new Integer(rs.getInt(20)));
                xmachine.setFueltype(new Integer(rs.getInt(21)));
                xmachine.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xmachine;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xmachine ("+(getXmachineId().intValue()!=0?"xmachine_id,":"")+"tmvnr,xmachtype_id,xmachtype2_id,reg_nr,expdate,vehicleid_nr,engine_nr,chassis_nr,classify,insurance_nr,insurance_tp,insurance_amt,deposit_amt,contract_fee,monthly_pay,paystart,payend,photo,consumption,fueltype) values("+(getXmachineId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXmachineId().intValue()!=0) {
                 ps.setObject(++n, getXmachineId());
             }
             ps.setObject(++n, getTmvnr());
             ps.setObject(++n, getXmachtypeId());
             ps.setObject(++n, getXmachtype2Id());
             ps.setObject(++n, getRegNr());
             ps.setObject(++n, getExpdate());
             ps.setObject(++n, getVehicleidNr());
             ps.setObject(++n, getEngineNr());
             ps.setObject(++n, getChassisNr());
             ps.setObject(++n, getClassify());
             ps.setObject(++n, getInsuranceNr());
             ps.setObject(++n, getInsuranceTp());
             ps.setObject(++n, getInsuranceAmt());
             ps.setObject(++n, getDepositAmt());
             ps.setObject(++n, getContractFee());
             ps.setObject(++n, getMonthlyPay());
             ps.setObject(++n, getPaystart());
             ps.setObject(++n, getPayend());
             ps.setObject(++n, getPhoto());
             ps.setObject(++n, getConsumption());
             ps.setObject(++n, getFueltype());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXmachineId().intValue()==0) {
             stmt = "SELECT max(xmachine_id) FROM xmachine";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXmachineId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xmachine " +
                    "SET tmvnr = ?, xmachtype_id = ?, xmachtype2_id = ?, reg_nr = ?, expdate = ?, vehicleid_nr = ?, engine_nr = ?, chassis_nr = ?, classify = ?, insurance_nr = ?, insurance_tp = ?, insurance_amt = ?, deposit_amt = ?, contract_fee = ?, monthly_pay = ?, paystart = ?, payend = ?, photo = ?, consumption = ?, fueltype = ?" + 
                    " WHERE xmachine_id = " + getXmachineId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getTmvnr());
                ps.setObject(2, getXmachtypeId());
                ps.setObject(3, getXmachtype2Id());
                ps.setObject(4, getRegNr());
                ps.setObject(5, getExpdate());
                ps.setObject(6, getVehicleidNr());
                ps.setObject(7, getEngineNr());
                ps.setObject(8, getChassisNr());
                ps.setObject(9, getClassify());
                ps.setObject(10, getInsuranceNr());
                ps.setObject(11, getInsuranceTp());
                ps.setObject(12, getInsuranceAmt());
                ps.setObject(13, getDepositAmt());
                ps.setObject(14, getContractFee());
                ps.setObject(15, getMonthlyPay());
                ps.setObject(16, getPaystart());
                ps.setObject(17, getPayend());
                ps.setObject(18, getPhoto());
                ps.setObject(19, getConsumption());
                ps.setObject(20, getFueltype());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk033");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk16");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk032");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk17");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk035");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk034");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk031");
        }
        if (Xhourcompare.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xhourcompare_xmachine_fk");
        }
        if (Xbookouts.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xbookouts_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk037");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id3_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk036");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk52");
        }
        if (Xabsenteeism.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xabsenteeism_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk53");
        }
        if (Xlowbed.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xlowbed_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk54");
        }
        if (Xdiesel2plantitem.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xdiesel2plantitem_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk55");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk56");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk57");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk11");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk13");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk12");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk15");
        }
        if (Xjobcard.exists(getConnection(),"machine_id5_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk51");
        }
        if (Xtripsheetpart.exists(getConnection(),"loaded1_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtripsheetpart_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"machine_id1_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk14");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk024");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk023");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk022");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk021");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk027");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk026");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id2_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk025");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk43");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk44");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk41");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk42");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk47");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk45");
        }
        if (Xjobcard.exists(getConnection(),"machine_id4_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk46");
        }
        if (Xtrip.exists(getConnection(),"withmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtrip_xmachine_fk2");
        }
        if (Xpetty.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xpetty_xmachine_fk");
        }
        if (Xmachservice.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xmachservice_xmachine_fk");
        }
        if (Xopmachassing.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xopmachassing_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk011");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk013");
        }
        if (Xconsume.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xconsume_xmachine_fk");
        }
        if (Xbateryissue.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xbateryissue_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk012");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk015");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk014");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk017");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id1_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk016");
        }
        if (Xbreakdown.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xbreakdown_xmachine_fk");
        }
        if (Xopclocksheet.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xopclocksheet_xmachine_fk");
        }
        if (Xdieselcart.exists(getConnection(),"assigned_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xdieselcart_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk052");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk35");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk053");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk34");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk37");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk051");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk36");
        }
        if (Xtransscheduleitm.exists(getConnection(),"machine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtransscheduleitm_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk056");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk31");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk057");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk054");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk33");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id5_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk055");
        }
        if (Xjobcard.exists(getConnection(),"machine_id3_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk32");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk27");
        }
        if (Xtrip.exists(getConnection(),"machine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtrip_xmachine_fk");
        }
        if (Xbreakdown.exists(getConnection(),"vehicle_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xbreakdown_xmachine_fk2");
        }
        if (Xtimesheet.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtimesheet_xmachine_fk");
        }
        if (Xtripsheetpart.exists(getConnection(),"loaded2_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xtripsheetpart_xmachine_fk2");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day7 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk047");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk26");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk25");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk041");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk24");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk042");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk23");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day3 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk043");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day2 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk22");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day4 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk044");
        }
        if (Xjobcard.exists(getConnection(),"machine_id2_day1 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk21");
        }
        if (Xsitediaryitem.exists(getConnection(),"xmachine_id = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xsitediaryitem_xmachine_fk");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day5 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk045");
        }
        if (Xjobcard.exists(getConnection(),"vehicle_id4_day6 = " + getXmachineId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: xjobcard_xmachine_fk046");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from xmachineincident
            Xmachineincident[] records = (Xmachineincident[])Xmachineincident.load(getConnection(),"xmachine_id = " + getXmachineId(),null);
            for (int i = 0; i<records.length; i++) {
                Xmachineincident xmachineincident = records[i];
                xmachineincident.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xmachine " +
                "WHERE xmachine_id = " + getXmachineId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXmachineId(new Integer(-getXmachineId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXmachineId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachine_id,tmvnr,xmachtype_id,xmachtype2_id,reg_nr,expdate,vehicleid_nr,engine_nr,chassis_nr,classify,insurance_nr,insurance_tp,insurance_amt,deposit_amt,contract_fee,monthly_pay,paystart,payend,photo,consumption,fueltype FROM xmachine " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xmachine(con,new Integer(rs.getInt(1)),rs.getString(2),new Integer(rs.getInt(3)),new Integer(rs.getInt(4)),rs.getString(5),rs.getDate(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10),rs.getString(11),rs.getString(12),rs.getDouble(13),rs.getDouble(14),new Integer(rs.getInt(15)),new Integer(rs.getInt(16)),rs.getDate(17),rs.getDate(18),rs.getObject(19),new Integer(rs.getInt(20)),new Integer(rs.getInt(21))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xmachine[] objects = new Xmachine[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xmachine xmachine = (Xmachine) lst.get(i);
            objects[i] = xmachine;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xmachine_id FROM xmachine " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXmachineId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return xmachineId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setXmachineId(id);
        setNew(prevIsNew);
    }

    public Integer getXmachineId() {
        return xmachineId;
    }

    public void setXmachineId(Integer xmachineId) throws ForeignKeyViolationException {
        setWasChanged(this.xmachineId != null && this.xmachineId != xmachineId);
        this.xmachineId = xmachineId;
        setNew(xmachineId.intValue() == 0);
    }

    public String getTmvnr() {
        return tmvnr;
    }

    public void setTmvnr(String tmvnr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.tmvnr != null && !this.tmvnr.equals(tmvnr));
        this.tmvnr = tmvnr;
    }

    public Integer getXmachtypeId() {
        return xmachtypeId;
    }

    public void setXmachtypeId(Integer xmachtypeId) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.xmachtypeId != null && !this.xmachtypeId.equals(xmachtypeId));
        this.xmachtypeId = xmachtypeId;
    }

    public Integer getXmachtype2Id() {
        return xmachtype2Id;
    }

    public void setXmachtype2Id(Integer xmachtype2Id) throws SQLException, ForeignKeyViolationException {
        if (null != xmachtype2Id)
            xmachtype2Id = xmachtype2Id == 0 ? null : xmachtype2Id;
        setWasChanged(this.xmachtype2Id != null && !this.xmachtype2Id.equals(xmachtype2Id));
        this.xmachtype2Id = xmachtype2Id;
    }

    public String getRegNr() {
        return regNr;
    }

    public void setRegNr(String regNr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.regNr != null && !this.regNr.equals(regNr));
        this.regNr = regNr;
    }

    public Date getExpdate() {
        return expdate;
    }

    public void setExpdate(Date expdate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.expdate != null && !this.expdate.equals(expdate));
        this.expdate = expdate;
    }

    public String getVehicleidNr() {
        return vehicleidNr;
    }

    public void setVehicleidNr(String vehicleidNr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.vehicleidNr != null && !this.vehicleidNr.equals(vehicleidNr));
        this.vehicleidNr = vehicleidNr;
    }

    public String getEngineNr() {
        return engineNr;
    }

    public void setEngineNr(String engineNr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.engineNr != null && !this.engineNr.equals(engineNr));
        this.engineNr = engineNr;
    }

    public String getChassisNr() {
        return chassisNr;
    }

    public void setChassisNr(String chassisNr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.chassisNr != null && !this.chassisNr.equals(chassisNr));
        this.chassisNr = chassisNr;
    }

    public String getClassify() {
        return classify;
    }

    public void setClassify(String classify) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.classify != null && !this.classify.equals(classify));
        this.classify = classify;
    }

    public String getInsuranceNr() {
        return insuranceNr;
    }

    public void setInsuranceNr(String insuranceNr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.insuranceNr != null && !this.insuranceNr.equals(insuranceNr));
        this.insuranceNr = insuranceNr;
    }

    public String getInsuranceTp() {
        return insuranceTp;
    }

    public void setInsuranceTp(String insuranceTp) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.insuranceTp != null && !this.insuranceTp.equals(insuranceTp));
        this.insuranceTp = insuranceTp;
    }

    public Double getInsuranceAmt() {
        return insuranceAmt;
    }

    public void setInsuranceAmt(Double insuranceAmt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.insuranceAmt != null && !this.insuranceAmt.equals(insuranceAmt));
        this.insuranceAmt = insuranceAmt;
    }

    public Double getDepositAmt() {
        return depositAmt;
    }

    public void setDepositAmt(Double depositAmt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.depositAmt != null && !this.depositAmt.equals(depositAmt));
        this.depositAmt = depositAmt;
    }

    public Integer getContractFee() {
        return contractFee;
    }

    public void setContractFee(Integer contractFee) throws SQLException, ForeignKeyViolationException {
        if (null != contractFee)
            contractFee = contractFee == 0 ? null : contractFee;
        setWasChanged(this.contractFee != null && !this.contractFee.equals(contractFee));
        this.contractFee = contractFee;
    }

    public Integer getMonthlyPay() {
        return monthlyPay;
    }

    public void setMonthlyPay(Integer monthlyPay) throws SQLException, ForeignKeyViolationException {
        if (null != monthlyPay)
            monthlyPay = monthlyPay == 0 ? null : monthlyPay;
        setWasChanged(this.monthlyPay != null && !this.monthlyPay.equals(monthlyPay));
        this.monthlyPay = monthlyPay;
    }

    public Date getPaystart() {
        return paystart;
    }

    public void setPaystart(Date paystart) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.paystart != null && !this.paystart.equals(paystart));
        this.paystart = paystart;
    }

    public Date getPayend() {
        return payend;
    }

    public void setPayend(Date payend) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.payend != null && !this.payend.equals(payend));
        this.payend = payend;
    }

    public Object getPhoto() {
        return photo;
    }

    public void setPhoto(Object photo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.photo != null && !this.photo.equals(photo));
        this.photo = photo;
    }

    public Integer getConsumption() {
        return consumption;
    }

    public void setConsumption(Integer consumption) throws SQLException, ForeignKeyViolationException {
        if (null != consumption)
            consumption = consumption == 0 ? null : consumption;
        setWasChanged(this.consumption != null && !this.consumption.equals(consumption));
        this.consumption = consumption;
    }

    public Integer getFueltype() {
        return fueltype;
    }

    public void setFueltype(Integer fueltype) throws SQLException, ForeignKeyViolationException {
        if (null != fueltype)
            fueltype = fueltype == 0 ? null : fueltype;
        setWasChanged(this.fueltype != null && !this.fueltype.equals(fueltype));
        this.fueltype = fueltype;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[21];
        columnValues[0] = getXmachineId();
        columnValues[1] = getTmvnr();
        columnValues[2] = getXmachtypeId();
        columnValues[3] = getXmachtype2Id();
        columnValues[4] = getRegNr();
        columnValues[5] = getExpdate();
        columnValues[6] = getVehicleidNr();
        columnValues[7] = getEngineNr();
        columnValues[8] = getChassisNr();
        columnValues[9] = getClassify();
        columnValues[10] = getInsuranceNr();
        columnValues[11] = getInsuranceTp();
        columnValues[12] = getInsuranceAmt();
        columnValues[13] = getDepositAmt();
        columnValues[14] = getContractFee();
        columnValues[15] = getMonthlyPay();
        columnValues[16] = getPaystart();
        columnValues[17] = getPayend();
        columnValues[18] = getPhoto();
        columnValues[19] = getConsumption();
        columnValues[20] = getFueltype();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXmachineId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXmachineId(null);
        }
        setTmvnr(flds[1]);
        try {
            setXmachtypeId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setXmachtypeId(null);
        }
        try {
            setXmachtype2Id(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setXmachtype2Id(null);
        }
        setRegNr(flds[4]);
        setExpdate(toDate(flds[5]));
        setVehicleidNr(flds[6]);
        setEngineNr(flds[7]);
        setChassisNr(flds[8]);
        setClassify(flds[9]);
        setInsuranceNr(flds[10]);
        setInsuranceTp(flds[11]);
        try {
            setInsuranceAmt(Double.parseDouble(flds[12]));
        } catch(NumberFormatException ne) {
            setInsuranceAmt(null);
        }
        try {
            setDepositAmt(Double.parseDouble(flds[13]));
        } catch(NumberFormatException ne) {
            setDepositAmt(null);
        }
        try {
            setContractFee(Integer.parseInt(flds[14]));
        } catch(NumberFormatException ne) {
            setContractFee(null);
        }
        try {
            setMonthlyPay(Integer.parseInt(flds[15]));
        } catch(NumberFormatException ne) {
            setMonthlyPay(null);
        }
        setPaystart(toDate(flds[16]));
        setPayend(toDate(flds[17]));
        setPhoto(flds[18]);
        try {
            setConsumption(Integer.parseInt(flds[19]));
        } catch(NumberFormatException ne) {
            setConsumption(null);
        }
        try {
            setFueltype(Integer.parseInt(flds[20]));
        } catch(NumberFormatException ne) {
            setFueltype(null);
        }
    }
}
