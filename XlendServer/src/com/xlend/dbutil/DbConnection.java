package com.xlend.dbutil;

import com.xlend.XlendServer;
import com.xlend.orm.Xopmachassing;
import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.rmi.RmiMessageSender;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;

/**
 *
 * @author Nick Mukhin
 */
public class DbConnection {

//    private static Connection logDBconnection = null;
    private static final int DB_VERSION_ID = 40;
    public static final String DB_VERSION = "0.40";
    private static boolean isFirstTime = true;
    private static Properties props = new Properties();
    private static String[] createLocalDBsqls = loadDDLscript("crebas_mysql.sql", ";");//"crebas_hsqldb.sql",";");
    private static String[] createLogDBsqls = new String[]{
        "create cached table updatelog "
        + "("
        + "    updatelog_id int generated by default as identity (start with 1),"
        + "    classname    varchar(32) not null,"
        + "    operation    int not null," //-1 - delete, 0 - update, 1 - insert
        + "    id           int not null,"
        + "    synchronized datetime,"
        + "    constraint updatelog_pk primary key(updatelog_id)"
        + ")"
    };
    private static String[] fixLocalDBsqls = new String[]{
        "update dbversion set version_id = " + DB_VERSION_ID + ",version = '" + DB_VERSION + "'",
        //28->29
        //        "alter table xbreakdown drop xconsume_id",
        //        "alter table xemployee drop clocksheets",
        //        "alter table xtimesheet drop constraint xtimesheet_xorder_fk",
        //        "alter table xtimesheet alter xorder_id int null",
        //        "alter table xtimesheet add constraint xtimesheet_xorder_fk foreign key (xorder_id) references xorder",
        //        "alter table xemployee drop bank_details",
        //        "drop table xsitediarypart",
        //        //"drop table dual",
        //        "create table junk (j char(1), primary key (j))",
        //        "insert into junk values('j')",
        //        "insert into cbitems (name, id, val)"
        //        + "  select 'parts_groups',1,'machines'"
        //        + "    from junk"
        //        + "   where not exists(select * from cbitems where name='parts_groups' and id=1)",
        //        "insert into cbitems (name, id, val)"
        //        + "  select 'parts_groups',2,'trucks'"
        //        + "    from junk"
        //        + "   where not exists(select * from cbitems where name='parts_groups' and id=2)",
        //        "insert into cbitems (name, id, val)"
        //        + "  select 'parts_groups',3,'vehicles'"
        //        + "    from junk"
        //        + "   where not exists(select * from cbitems where name='parts_groups' and id=3)",
        //        "insert into cbitems (name, id, val)"
        //        + "  select 'parts_groups',4,'misc'"
        //        + "    from junk"
        //        + "   where not exists(select * from cbitems where name='parts_groups' and id=4)",
        //        "insert into cbitems (name, id, val)"
        //        + "  select 'parts_groups',5,'liquids'"
        //        + "    from junk"
        //        + "   where not exists(select * from cbitems where name='parts_groups' and id=5)",
        //        //        "drop table xparts",
        //        //        "drop table xpartcategory",
        //        "create table xpartcategory"
        //        + "("
        //        + "    xpartcategory_id int not null auto_increment,"
        //        + "    group_id         int not null,"
        //        + "    name             varchar(64) not null,"
        //        + "    parent_id        int,"
        //        + "    constraint xpartcategory_pk primary key (xpartcategory_id),"
        //        + "    constraint xpartcategory_xpartcategory_fk foreign key (parent_id) references xpartcategory (xpartcategory_id) on delete cascade"
        //        + ")",
        //        "create unique index xpartcategory_uniq_idx on xpartcategory (group_id, name)",
        //        "insert into xpartcategory (group_id, name) "
        //        + "select id, concat(upper(substr(val,1,1)), substr(val,2), ' parts') "
        //        + " from cbitems"
        //        + " where name='parts_groups'"
        //        + " and not exists(select * from xpartcategory"
        //        + " where group_id=cbitems.id and name=concat(upper(substr(cbitems.val,1,1)), substr(cbitems.val,2)))",
        //        //29->30
        //        "create table xparts"
        //        + "("
        //        + "    xparts_id        int not null auto_increment,"
        //        + "    serialnumber     varchar(32) null,"
        //        + "    description      varchar(128) not null,"
        //        + "    xmachtype_id     int not null,"
        //        + "    xpartcategory_id int not null,"
        //        + "    whatfor          varchar(128),"
        //        + "    constraint xparts_pk primary key (xparts_id),"
        //        + "    constraint xparts_xmachtype_id foreign key (xmachtype_id) references xmachtype (xmachtype_id),"
        //        + "    constraint xparts_xpartcategory_fk foreign key (xpartcategory_id) references xpartcategory (xpartcategory_id)"
        //        + ")",
        //30->31
        //        "drop table xpartstocks",
        //        "drop table xstocks",
        //        "alter table xparts change column serialnumber partnumber varchar(32)",
        //        "alter table xparts drop column whatfor",
        //        "alter table xparts drop foreign key xparts_xmachtype_id",
        //        "alter table xparts drop column xmachtype_id",
        //        "alter table xparts add storename varchar(64)",
        //        "alter table xparts add machinemodel varchar(64)",
        //        "alter table xparts add quantity int not null default 0",
        //        "alter table xparts add lastsupplier_id int",
        //        "alter table xparts add prevsupplier_id int",
        //        "alter table xparts add priceperunit decimal(10,2) not null default 0",
        //        "alter table xparts add purchased date",
        //        "alter table xparts add constraint xparts_xsupplier_fk foreign key (lastsupplier_id) references xsupplier (xsupplier_id)",
        //        "alter table xparts add constraint xparts_xsupplier_fk2 foreign key (prevsupplier_id) references xsupplier (xsupplier_id)",
        //        "alter table xparts add constraint valid_quantity check(quantity>=0)",
        //        "create table xbookouts"
        //        + "("
        //        + "    xbookouts_id    int not null auto_increment,"
        //        + "    xparts_id       int not null,"
        //        + "    issue_date      date not null,"
        //        + "    xsite_id        int not null,"
        //        + "    xmachine_id     int not null,"
        //        + "    issuedby_id     int not null,"
        //        + "    issuedto_id     int not null,"
        //        + "    quantity        int not null,"
        //        + "    constraint xbookouts_pk primary key (xbookouts_id),"
        //        + "    constraint xbookouts_xparts_fk foreign key (xparts_id) references xparts (xparts_id),"
        //        + "    constraint xbookouts_xmachine_fk foreign key (xmachine_id) references xmachine (xmachine_id),"
        //        + "    constraint xbookouts_xemployee_fk foreign key (issuedby_id) references xemployee (xemployee_id),"
        //        + "    constraint xbookouts_xemployee_fk2 foreign key (issuedto_id) references xemployee (xemployee_id)"
        //        + ")",
        //        "create table xaddstocks"
        //        + "("
        //        + "    xaddstocks_id   int not null auto_increment,"
        //        + "    xparts_id       int not null,"
        //        + "    purchase_date   date not null,"
        //        + "    enteredby_id    int not null,"
        //        + "    xsupplier_id    int not null,"
        //        + "    priceperunit    decimal(10,2) not null,"
        //        + "    quantity        int not null,"
        //        + "    constraint xaddstocks_pk primary key (xaddstocks_id),"
        //        + "    constraint xaddstocks_xparts_fk foreign key (xparts_id) references xparts (xparts_id),"
        //        + "    constraint xaddstocks_xemployee_fk foreign key (enteredby_id) references xemployee (xemployee_id),"
        //        + "    constraint xaddstocks_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id)"
        //        + ")"
        //31->32
        //        "alter table picture add stamp timestamp",
        //        "alter table profile add stamp timestamp",
        //        "alter table userprofile add stamp timestamp",
        //        "alter table sheet add stamp timestamp",
        //        "alter table usersheet add stamp timestamp",
        //        "alter table reportgroup add stamp timestamp",
        //        "alter table clientprofile add stamp timestamp",
        //        "alter table xclient add stamp timestamp",
        //        "alter table xcontract add stamp timestamp",
        //        "alter table xcontractpage add stamp timestamp",
        //        "alter table xquotation add stamp timestamp",
        //        "alter table xquotationpage add stamp timestamp",
        //        "alter table xorder add stamp timestamp",
        //        "alter table xsite add stamp timestamp",
        //        "alter table xorderpage add stamp timestamp",
        //        "alter table xposition add stamp timestamp",
        //        "alter table xemployee add stamp timestamp",
        //        "alter table xtimesheet add stamp timestamp",
        //        "alter table xwage add stamp timestamp",
        //        "alter table xwagesum add stamp timestamp",
        //        "alter table xwagesumitem add stamp timestamp",
        //        "alter table xmachtype add stamp timestamp",
        //        "alter table xmachine add stamp timestamp",
        //        "alter table xlowbed add stamp timestamp",
        //        "alter table xtrip add stamp timestamp",
        //        "alter table xorderitem add stamp timestamp",
        //        "alter table xsupplier add stamp timestamp",
        //        "alter table xpaidmethod add stamp timestamp",
        //        "alter table xdieselpchs add stamp timestamp",
        //        "alter table xdieselcard add stamp timestamp",
        //        "alter table xconsume add stamp timestamp",
        //        "alter table xbreakdown add stamp timestamp",
        //        "alter table xbreakconsume add stamp timestamp",
        //        "alter table xfuel add stamp timestamp",
        //        "alter table xpayment add stamp timestamp",
        //        "alter table xabsenteeism add stamp timestamp",
        //        "alter table xissuing add stamp timestamp",
        //        "alter table xtripsheet add stamp timestamp",
        //        "alter table xtripsheetpart add stamp timestamp",
        //        "alter table xaccounts add stamp timestamp",
        //        "alter table xbankbalance add stamp timestamp",
        //        "alter table xbankbalancepart add stamp timestamp",
        //        "alter table xsitediary add stamp timestamp",
        //        "alter table xsitediaryitem add stamp timestamp",
        //        "alter table xappforleave add stamp timestamp",
        //        "alter table xloans add stamp timestamp",
        //        "alter table xincidents add stamp timestamp",
        //        "alter table xmachineincident add stamp timestamp",
        //        "alter table xemployeeincident add stamp timestamp",
        //        "alter table xsalarylist add stamp timestamp",
        //        "alter table xsalary add stamp timestamp",
        //        "alter table xopclocksheet add stamp timestamp",
        //        "alter table xjobcard add stamp timestamp",
        //        "alter table xhourcompare add stamp timestamp",
        //        "alter table xhourcompareday add stamp timestamp",
        //        "alter table cbitems add stamp timestamp",
        //        "alter table xmachrentalrate add stamp timestamp",
        //        "alter table xmachrentalrateitm add stamp timestamp",
        //        "alter table xtransscheduleitm add stamp timestamp",
        //        "alter table xopmachassing add stamp timestamp",
        //        "alter table xpartcategory add stamp timestamp",
        //        "alter table xparts add stamp timestamp",
        //        "alter table xbookouts add stamp timestamp",
        //        "alter table xaddstocks add stamp timestamp",
        //        "alter table xtrip modify tosite_id int null",
        //        "alter table xtrip add othersite varchar(128)",
        //        "alter table xtripsheet drop foreign key xtripsheet_xmachine_fk",
        //        "alter table xtripsheet add constraint xtripsheet_xlowbed_fk foreign key (xlowbed_id) references xlowbed (xlowbed_id)",
        //        "update xlowbed set xmachine_id=185 where xmachine_id=179",
        //        "update xlowbed set xmachine_id=186 where xmachine_id=178",
        //        "update xlowbed set xmachine_id=187 where xmachine_id=181",
        //        "update xlowbed set xmachine_id=196 where xmachine_id=182",
        //        "update xconsume set xmachine_id=185 where xmachine_id=179",
        //        "update xconsume set xmachine_id=186 where xmachine_id=178",
        //        "update xconsume set xmachine_id=187 where xmachine_id=181",
        //        "update xconsume set xmachine_id=196 where xmachine_id=182",
        //        "update xmachineincident set xmachine_id=185 where xmachine_id=179",
        //        "update xmachineincident set xmachine_id=186 where xmachine_id=178",
        //        "update xmachineincident set xmachine_id=187 where xmachine_id=181",
        //        "update xmachineincident set xmachine_id=196 where xmachine_id=182",
        //        "update xopmachassing set xmachine_id=185 where xmachine_id=179",
        //        "update xopmachassing set xmachine_id=186 where xmachine_id=178",
        //        "update xopmachassing set xmachine_id=187 where xmachine_id=181",
        //        "update xopmachassing set xmachine_id=196 where xmachine_id=182",
        //        "update xmachine set xmachtype_id=7 where xmachtype_id=3826",
        //        "delete from xmachine where xmachtype_id not in (select xmachtype_id from xmachtype)",
        //32->33    
        //        "alter table xtimesheet modify xsite_id int null",
        //        "alter table xtimesheet add xmachine_id int null",
        //        "alter table xtimesheet add constraint xtimesheet_xmachine_fk foreign key (xmachine_id) references xmachine (xmachine_id)",
        //        "alter table xwage drop deduction",
        //        "drop function extractnum",
        //        "create function extractnum(sval varchar(32)) "
        //        + "returns integer deterministic "
        //        + "begin "
        //        + "   declare sub varchar(32) default '';"
        //        + "   declare i tinyint default 0;"
        //        + "   LP: loop"
        //        + "        set i = i + 1;"
        //        + "        if i > length(sval) then"
        //        + "            leave LP;"
        //        + "        end if;"
        //        + "        if instr('0123456789',substr(sval,i,1))>0 then"
        //        + "            set sub = concat(sub,substr(sval,i,1));"
        //        + "        end if;"
        //        + "   end loop LP;"
        //        + "   return convert(sub, unsigned);"
        //        + "end;",
        //        "drop function extractchars",
        //        "create function extractchars(sval varchar(32)) "
        //        + "returns char(32) deterministic "
        //        + "begin "
        //        + "   declare sub varchar(32) default ''; "
        //        + "   declare i tinyint default 0; "
        //        + "   LP: loop "
        //        + "        set i = i + 1; "
        //        + "        if i > length(sval) then "
        //        + "            leave LP; "
        //        + "        end if; "
        //        + "        if instr('0123456789',substr(sval,i,1))=0 then "
        //        + "            set sub = concat(sub,substr(sval,i,1)); "
        //        + "        end if; "
        //        + "   end loop LP; "
        //        + "   return sub; "
        //        + "end; ",
        //        "alter table xjobcard add vehicle_id1_day1 int",
        //        "alter table xjobcard add vehicle_id2_day1 int",
        //        "alter table xjobcard add vehicle_id3_day1 int",
        //        "alter table xjobcard add vehicle_id4_day1 int",
        //        "alter table xjobcard add vehicle_id5_day1 int",
        //        "alter table xjobcard add vehicle_id1_day2 int",
        //        "alter table xjobcard add vehicle_id2_day2 int",
        //        "alter table xjobcard add vehicle_id3_day2 int",
        //        "alter table xjobcard add vehicle_id4_day2 int",
        //        "alter table xjobcard add vehicle_id5_day2 int",
        //        "alter table xjobcard add vehicle_id1_day3 int",
        //        "alter table xjobcard add vehicle_id2_day3 int",
        //        "alter table xjobcard add vehicle_id3_day3 int",
        //        "alter table xjobcard add vehicle_id4_day3 int",
        //        "alter table xjobcard add vehicle_id5_day3 int",
        //        "alter table xjobcard add vehicle_id1_day4 int",
        //        "alter table xjobcard add vehicle_id2_day4 int",
        //        "alter table xjobcard add vehicle_id3_day4 int",
        //        "alter table xjobcard add vehicle_id4_day4 int",
        //        "alter table xjobcard add vehicle_id5_day4 int",
        //        "alter table xjobcard add vehicle_id1_day5 int",
        //        "alter table xjobcard add vehicle_id2_day5 int",
        //        "alter table xjobcard add vehicle_id3_day5 int",
        //        "alter table xjobcard add vehicle_id4_day5 int",
        //        "alter table xjobcard add vehicle_id5_day5 int",
        //        "alter table xjobcard add vehicle_id1_day6 int",
        //        "alter table xjobcard add vehicle_id2_day6 int",
        //        "alter table xjobcard add vehicle_id3_day6 int",
        //        "alter table xjobcard add vehicle_id4_day6 int",
        //        "alter table xjobcard add vehicle_id5_day6 int",
        //        "alter table xjobcard add vehicle_id1_day7 int",
        //        "alter table xjobcard add vehicle_id2_day7 int",
        //        "alter table xjobcard add vehicle_id3_day7 int",
        //        "alter table xjobcard add vehicle_id4_day7 int",
        //        "alter table xjobcard add vehicle_id5_day7 int",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk011 foreign key (vehicle_id1_day1) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk021 foreign key (vehicle_id2_day1) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk031 foreign key (vehicle_id3_day1) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk041 foreign key (vehicle_id4_day1) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk051 foreign key (vehicle_id5_day1) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk012 foreign key (vehicle_id1_day2) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk022 foreign key (vehicle_id2_day2) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk032 foreign key (vehicle_id3_day2) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk042 foreign key (vehicle_id4_day2) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk052 foreign key (vehicle_id5_day2) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk013 foreign key (vehicle_id1_day3) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk023 foreign key (vehicle_id2_day3) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk033 foreign key (vehicle_id3_day3) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk043 foreign key (vehicle_id4_day3) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk053 foreign key (vehicle_id5_day3) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk014 foreign key (vehicle_id1_day4) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk024 foreign key (vehicle_id2_day4) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk034 foreign key (vehicle_id3_day4) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk044 foreign key (vehicle_id4_day4) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk054 foreign key (vehicle_id5_day4) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk015 foreign key (vehicle_id1_day5) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk025 foreign key (vehicle_id2_day5) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk035 foreign key (vehicle_id3_day5) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk045 foreign key (vehicle_id4_day5) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk055 foreign key (vehicle_id5_day5) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk016 foreign key (vehicle_id1_day6) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk026 foreign key (vehicle_id2_day6) references xmachine (xmachine_id)"

        //        ,"alter table xjobcard add constraint xjobcard_xmachine_fk036 foreign key (vehicle_id3_day6) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk046 foreign key (vehicle_id4_day6) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk056 foreign key (vehicle_id5_day6) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk017 foreign key (vehicle_id1_day7) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk027 foreign key (vehicle_id2_day7) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk037 foreign key (vehicle_id3_day7) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk047 foreign key (vehicle_id4_day7) references xmachine (xmachine_id)",
        //        "alter table xjobcard add constraint xjobcard_xmachine_fk057 foreign key (vehicle_id5_day7) references xmachine (xmachine_id)"
        //            "alter table xparts modify quantity decimal(10,2)"
        //            ,"alter table xbookouts modify quantity decimal(10,2)"
        //            ,"alter table xaddstocks modify quantity decimal(10,2)"
        //            ,"alter table xtripsheetpart add loaded1 varchar(64)"
        //            ,"alter table xtripsheetpart add loaded2 varchar(64)"
        //33->34
        //        "alter table xmachine modify insurance_amt decimal(10,2)",
        //        "alter table xmachine modify deposit_amt decimal(10,2)",
        //        "alter table xemployee add management bit default 0",
        //        "insert into sheet (sheetname,parent_id) "
        //        + "select 'Loans Report', sheet_id "
        //        + "from sheet where sheetname='REPORTS' and not exists(select * from sheet where sheetname='Loans Report')",
        //        "insert into reportgroup (sheetgroup_id,sheet_id) "
        //        + "select g.sheet_id,i.sheet_id "
        //        + " from sheet g, sheet i where g.sheetname='HR' and i.sheetname='Loans Report'"
        //        + " and not exists(select * from reportgroup "
        //        + " where sheetgroup_id="
        //        + "(select sheet_id from sheet"
        //        + " where sheetname='HR') and sheet_id=(select sheet_id from sheet where sheetname='Loans Report'))",
        //        "insert into sheet (sheetname,parent_id) "
        //        + "select 'Incidents Report', sheet_id "
        //        + "from sheet where sheetname='REPORTS' and not exists(select * from sheet where sheetname='Incidents Report')",
        //        "insert into reportgroup (sheetgroup_id,sheet_id) "
        //        + "select g.sheet_id,i.sheet_id "
        //        + " from sheet g, sheet i where g.sheetname='SITES' and g.parent_id IS NULL and i.sheetname='Incidents Report'"
        //        + " and not exists(select * from reportgroup "
        //        + " where sheetgroup_id="
        //        + "(select sheet_id from sheet"
        //        + " where sheetname='SITES' and parent_id IS NULL) and sheet_id=(select sheet_id from sheet where sheetname='Incidents Report'))",
        //        //34->35    
        //        "alter table xorderitem add description varchar(255)",
        //        "alter table xwage add tsnum int",
        //        "create table xppetype ("
        //        + "    xppetype_id    int not null auto_increment,"
        //        + "    xppetype       varchar(64) not null,"
        //        + "    stocklevel     int not null default 0,"
        //        + "    stamp          timestamp,"
        //        + "    constraint xppetype_pk primary key (xppetype_id)"
        //        + ")",
        //        "create table xppebuy ("
        //        + "    xppebuy_id      int not null auto_increment,"
        //        + "    buydate         date not null,"
        //        + "    boughtby_id     int not null,"
        //        + "    xsupplier_id    int not null,"
        //        + "    authorizedby_id int not null,"
        //        + "    stamp          timestamp,"
        //        + "    constraint xppebuy_pk primary key (xppebuy_id),"
        //        + "    constraint xppebuy_xemployee_fk foreign key (boughtby_id) references xemployee (xemployee_id),"
        //        + "    constraint xppebuy_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id),"
        //        + "    constraint xppebuy_xemployee_fk2 foreign key (authorizedby_id) references xemployee (xemployee_id)"
        //        + ")",
        //        "create table xppebuyitem ("
        //        + "    xppebuyitem_id  int not null auto_increment,"
        //        + "    xppebuy_id      int not null,"
        //        + "    xppetype_id     int not null,"
        //        + "    quantity        int not null,"
        //        + "    priceperunit    decimal (8,2),"
        //        + "    stamp           timestamp,"
        //        + "    constraint xppebuyitem_pk primary key (xppebuyitem_id),"
        //        + "    constraint xppebuyitem_xppetype_fk foreign key (xppetype_id) references xppetype (xppetype_id),"
        //        + "    constraint xppebuyitem_xppeby_fk foreign key (xppebuy_id) references xppebuy (xppebuy_id)"
        //        + ")",
        //        "create table xppeissue ("
        //        + "    xppeissue_id    int not null auto_increment,"
        //        + "    issuedate       date not null,"
        //        + "    issuedby_id     int not null,"
        //        + "    issuedto_id     int not null,"
        //        + "    authorizedby_id int not null,"
        //        + "    stamp          timestamp,"
        //        + "    constraint xppeissue_pk primary key (xppeissue_id),"
        //        + "    constraint xppeissue_xemployee_fk foreign key (issuedby_id) references xemployee (xemployee_id),"
        //        + "    constraint xppeissue_xemployee_fk2 foreign key (issuedto_id) references xemployee (xemployee_id),"
        //        + "    constraint xppeissue_xemployee_fk3 foreign key (authorizedby_id) references xemployee (xemployee_id)"
        //        + ")",
        //        "create table xppeissueitem ("
        //        + "    xppeissueitem_id int not null auto_increment,"
        //        + "    xppeissue_id     int not null,"
        //        + "    xppetype_id     int not null,"
        //        + "    quantity        int not null,"
        //        + "    stamp           timestamp,"
        //        + "    constraint xppeissueitem_pk primary key (xppeissueitem_id),"
        //        + "    constraint xppeissueitem_xppetype_fk foreign key (xppetype_id) references xppetype (xppetype_id),"
        //        + "    constraint xppeissueitem_xppeissue_fk foreign key (xppeissue_id) references xppeissue (xppeissue_id)"
        //        + ")",
        //        "alter table xppebuyitem add priceperunit decimal (8,2)",
        //        //35->36
        //        "create table xmachservice"
        //        + "("
        //        + "    xmachservice_id  int not null auto_increment,"
        //        + "    servicedate      date not null,"
        //        + "    entrydate        date not null,"
        //        + "    servicedby_id    int not null,"
        //        + "    assistedby_id    int not null,"
        //        + "    xmachine_id      int not null,"
        //        + "    engine_oil       varchar(128),"
        //        + "    hydraulic_oil    varchar(128),"
        //        + "    brake_fluid      varchar(128),"
        //        + "    transmission_oil varchar(128),"
        //        + "    gearbox_oil      varchar(128),"
        //        + "    anti_freeze      varchar(128),"
        //        + "    diff_checked1    varchar(128),"
        //        + "    diff_checked2    varchar(128),"
        //        + "    diff_checked3    varchar(128),"
        //        + "    stamp            timestamp,"
        //        + "    constraint xmachservice_pk primary key (xmachservice_id),"
        //        + "    constraint xmachservice_xemployee_fk foreign key (servicedby_id) references xemployee (xemployee_id),"
        //        + "    constraint xmachservice_xemployee_fk2 foreign key (assistedby_id) references xemployee (xemployee_id),"
        //        + "    constraint xmachservice_xmachine_fk foreign key (xmachine_id) references xmachine (xmachine_id)"
        //        + ")",
        //        //36->37
        //        "drop table xdieselpchs",
        //        "drop table xdieselcard",
        //        "drop table xissuing",
        //        "create table xdieselcart"
        //        + "("
        //        + "    xdieselcart_id   int not null auto_increment,"
        //        + "    fleet_nr         int not null,"
        //        + "    reg_nr           varchar(32),"
        //        + "    expdate          date,"
        //        + "    litres           int not null,"
        //        + "    chassis_nr       varchar(32),"
        //        + "    assigned_id      int,"
        //        + "    stamp            timestamp,"
        //        + "    photo            mediumblob,"
        //        + "    constraint xdieselcart_pk primary key (xdieselcart_id),"
        //        + "    constraint xdieselcart_xmachine_fk foreign key (assigned_id) references xmachine (xmachine_id)"
        //        + ")",
        //        "create table xdieselpurchase"
        //        + "("
        //        + "    xdieselpurchase_id int not null auto_increment,"
        //        + "    xsupplier_id       int not null,"
        //        + "    purchase_date      date not null,"
        //        + "    litres             decimal(8,2) not null,"
        //        + "    rand_factor        decimal(5,2) not null,"
        //        + "    stamp              timestamp,"
        //        + "    constraint xdieselpurchase_pk primary key (xdieselpurchase_id),"
        //        + "    constraint xdieselpurchase_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id)"
        //        + ")",
        //        "create table xdieselcartissue"
        //        + "("
        //        + "    xdieselcartissue_id int not null auto_increment,"
        //        + "    issue_date          date not null,"
        //        + "    driver_id           int not null,"
        //        + "    xdieselcart_id      int not null,"
        //        + "    liters              decimal(6,2) not null,"
        //        + "    xsupplier_id        int not null,"
        //        + "    stamp               timestamp,"
        //        + "    constraint xdieselcartissue_pk primary key (xdieselcartissue_id),"
        //        + "    constraint xdieselcartissue_xemployee_fk foreign key (driver_id) references xemployee (xemployee_id),"
        //        + "    constraint xdieselcartissue_xdieselcart_fk foreign key (xdieselcart_id) references xdieselcart (xdieselcart_id),"
        //        + "    constraint xdieselcartissue_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id)"
        //        + ")",
        //        "create table xdiesel2plant"
        //        + "("
        //        + "    xdiesel2plant_id  int not null auto_increment,"
        //        + "    xdieselcart_id    int not null,"
        //        + "    last_date         date,"
        //        + "    driver_id         int not null,"
        //        + "    stamp             timestamp,"
        //        + "    constraint xdiesel2plant_pk primary key (xdiesel2plant_id),"
        //        + "    constraint xdiesel2plant_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id),"
        //        + "    constraint xdiesel2plant_xdieselcart_fk foreign key (xdieselcart_id) references xdieselcart (xdieselcart_id)"
        //        + ")",
        //        "create table xdiesel2plantitem"
        //        + "("
        //        + "    xdiesel2plantitem_id int not null auto_increment,"
        //        + "    xdiesel2plant_id     int not null,"
        //        + "    add_date             date not null,"
        //        + "    xmachine_id          int not null,"
        //        + "    xsite_id             int not null,"
        //        + "    operator_id          int not null,"
        //        + "    hour_meter           decimal(9,1),"
        //        + "    issuedby_id          int not null,"
        //        + "    liters               decimal(6,2) not null,"
        //        + "    stamp                timestamp,"
        //        + "    constraint xdiesel2plantitem_pk primary key (xdiesel2plantitem_id),"
        //        + "    constraint xdiesel2plantitem_xdiesel2plant_fk foreign key (xdiesel2plant_id) references xdiesel2plant (xdiesel2plant_id),"
        //        + "    constraint xdiesel2plantitem_xmachine_fk foreign key (xmachine_id) references xmachine (xmachine_id),"
        //        + "    constraint xdiesel2plantitem_xsite_fk foreign key (xsite_id) references xsite (xsite_id),"
        //        + "    constraint xdiesel2plantitem_xemployee_fk foreign key (operator_id) references xemployee (xemployee_id),"
        //        + "    constraint xdiesel2plantitem_xemployee_fk2 foreign key (issuedby_id) references xemployee (xemployee_id)"
        //        + ")",
        //        "alter table xdieselpurchase modify litres decimal(8,2)",
        //        "insert into sheet (sheetname,parent_id) "
        //        + "select 'Assignments Report', sheet_id "
        //        + "  from sheet where sheetname='REPORTS' and not exists(select * from sheet where sheetname='Assignments Report')",
        //        "insert into reportgroup (sheetgroup_id,sheet_id) "
        //        + "select g.sheet_id,i.sheet_id "
        //        + "  from sheet g, sheet i where g.sheetname='HR' and i.sheetname='Assignments Report' "
        //        + "   and not exists(select * "
        //        + "                    from reportgroup"
        //        + "                    where sheetgroup_id = (select sheet_id"
        //        + "                                             from sheet"
        //        + "                                            where sheetname='HR')"
        //        + "               and sheet_id=(select sheet_id from sheet where sheetname='Assignments Report'))",
        //37->38
        //        "create table xbatterypurchase"
        //        + "("
        //        + "    xbatterypurchase_id int not null auto_increment,"
        //        + "    purchase_date       date not null,"
        //        + "    entry_date          date not null,"
        //        + "    purchased_by        int not null,"
        //        + "    xsupplier_id        int not null,"
        //        + "    invoice_vat_incl    decimal (9,2) not null,"
        //        + "    invoice_vat_excl    decimal (9,2) not null,"
        //        + "    stamp               timestamp,"
        //        + "    constraint xbatterypurchase_pk primary key (xbatterypurchase_id),"
        //        + "    constraint xbatterypurchase_xsupplier_fk foreign key (xsupplier_id) references xsupplier (xsupplier_id)"
        //        + ")",
        //        "create table xbateryissue"
        //        + "("
        //        + "    xbateryissue_id     int not null auto_increment,"
        //        + "    issue_date          date not null,"
        //        + "    entry_date          date not null,"
        //        + "    issued_by           int not null,"
        //        + "    issued_to           int not null,"
        //        + "    xmachine_id         int not null,"
        //        + "    stamp               timestamp,"
        //        + "    constraint xbateryissue_pk primary key (xbateryissue_id),"
        //        + "    constraint xbateryissue_xemployee_fk foreign key (issued_by) references xemployee (xemployee_id),"
        //        + "    constraint xbateryissue_xemployee_fk2 foreign key (issued_to) references xemployee (xemployee_id),"
        //        + "    constraint xbateryissue_xmachine_fk foreign key( xmachine_id) references xmachine (xmachine_id)"
        //        + ")",
        //        "create table xbattery"
        //        + "("
        //        + "    xbattery_id         int not null auto_increment,"
        //        + "    battery_code        varchar(32) not null,"
        //        + "    vat_excl_unit       decimal (6,2),"
        //        + "    battery_id          varchar(32),"
        //        + "    xbatterypurchase_id int not null,"
        //        + "    xbateryissue_id     int null,"
        //        + "    stamp               timestamp,"
        //        + "    constraint xbattery_pk primary key (xbattery_id),"
        //        + "    constraint xbattery_xbatterypurchase_fk foreign key (xbatterypurchase_id) references xbatterypurchase (xbatterypurchase_id),"
        //        + "    constraint xbattery_xbateryissue_fk foreign key (xbateryissue_id) references xbateryissue (xbateryissue_id)"
        //        + ")",
        "alter table xsupplier add credit_limit int",
        "alter table xdieselpurchase add paid decimal(8,2)",
        //38->39
        "alter table xemployee add clock_numonly smallint",
        "update xemployee set clock_numonly = extractnum(clock_num)",
        "create index employee_clocknumonly on xemployee (clock_numonly,clock_num)",
        "create trigger tr_xemployee_beforeinsert"
        + " before insert on xemployee"
        + " for each row"
        + " begin"
        + "   set new.clock_numonly = extractnum(new.clock_num);"
        + " end;",
        "create trigger tr_xemployee_beforeupdate"
        + " before update on xemployee"
        + " for each row"
        + " begin"
        + "   set new.clock_numonly = extractnum(new.clock_num);"
        + " end;",
        //39->40
        "alter table xbreakdown modify timeleft time",
        "alter table xbreakdown modify timeback time",
        "alter table xbreakdown modify km2site1way decimal(6,2)",
        "alter table xbreakdown modify hoursonjob decimal(6,2)",
        "alter table xopclocksheet modify km_start1 decimal(10,2)",
        "alter table xopclocksheet modify km_stop1 decimal(10,2)",
        "alter table xopclocksheet modify km_start2 decimal(10,2)",
        "alter table xopclocksheet modify km_stop2 decimal(10,2)",
        "alter table xopclocksheet modify km_start3 decimal(10,2)",
        "alter table xopclocksheet modify km_stop3 decimal(10,2)",
        "alter table xopclocksheet modify km_start4 decimal(10,2)",
        "alter table xopclocksheet modify km_stop4 decimal(10,2)",
        "alter table xopclocksheet modify km_start5 decimal(10,2)",
        "alter table xopclocksheet modify km_stop5 decimal(10,2)",
        "alter table xopclocksheet modify km_start6 decimal(10,2)",
        "alter table xopclocksheet modify km_stop6 decimal(10,2)",
        "alter table xopclocksheet modify km_start7 decimal(10,2)",
        "alter table xopclocksheet modify km_stop7 decimal(10,2)",
        
        "create view employeeshort as SELECT xemployee_id,clock_num,first_name,sur_name,nick_name,xposition_id FROM xemployee"
    };

//    public synchronized static Connection getLogDBconnection() {
//        if (logDBconnection == null) {
//            try {
//                Locale.setDefault(Locale.ENGLISH);
//                DriverManager.registerDriver((java.sql.Driver) Class.forName("org.hsqldb.jdbcDriver").newInstance());
//                logDBconnection = DriverManager.getConnection("jdbc:hsqldb:file://" + getCurDir() + "/LogDB/XlendServer", "sa", "");
//                logDBconnection.setAutoCommit(true);
//                sqlBatch(createLogDBsqls, logDBconnection, true);
//            } catch (Exception ex) {
//                XlendServer.log(ex);
//            }
//        }
//        return logDBconnection;
//    }

    public static String getLogin() {
        return props.getProperty("dbUser", "sa");
    }

    public static String getPassword() {
        return props.getProperty("dbPassword", "");
    }

    public static String getBackupCommand() {
        return props.getProperty("dbDump", "mysqldump");
    }

    public static String getFtpURL() {
        return props.getProperty("ftpURL", "ec2-23-22-145-131.compute-1.amazonaws.com");
    }

    public static String getFtpPath() {
        return props.getProperty("ftpPath", "/root/backups/");
    }

    public static String getFtpLogin() {
        return props.getProperty("ftpLogin", "jaco");
    }

    public static String getFtpPassword() {
        return props.getProperty("ftpLogin", "jaco84oliver");
    }

    public static Connection getConnection() throws RemoteException {
        Connection connection = null;
        try {
            Locale.setDefault(Locale.ENGLISH);
            DriverManager.registerDriver(
                    (java.sql.Driver) Class.forName(
                    props.getProperty("dbDriverName",
                    "org.hsqldb.jdbcDriver")).newInstance());
            connection = DriverManager.getConnection(
                    props.getProperty("dbConnection",
                    "jdbc:hsqldb:file://" + getCurDir() + "/DB/XlendServer"),
                    getLogin(), getPassword());
            connection.setAutoCommit(true);
            RmiMessageSender.isMySQL = (connection.getClass().getCanonicalName().indexOf("mysql") > -1);
        } catch (Exception e) {
            XlendServer.log(e);
        }
        if (isFirstTime) {
            initLocalDB(connection);
//            if (props.getProperty("dbDriverName", "org.hsqldb.jdbcDriver").equals("org.hsqldb.jdbcDriver")) {
            fixLocalDB(connection);
//            }
            isFirstTime = false;
        }
        return checkVersion(connection);
    }

    public static void initLocalDB(Connection connection) {
        sqlBatch(createLocalDBsqls, connection, false);
    }

    public static void fixLocalDB(Connection connection) {
        sqlBatch(fixLocalDBsqls, connection, props.getProperty("LogDbFixes", "false").equalsIgnoreCase("true"));
        fixWrongAssignments(connection);
    }

    public static void sqlBatch(String[] sqls, Connection connection, boolean tolog) {
        PreparedStatement ps = null;
        for (int i = 0; i < sqls.length; i++) {
            try {
//                System.out.println(""+i+") "+sqls[i]);
                ps = connection.prepareStatement(sqls[i]);
                ps.execute();
                if (tolog) {
                    XlendServer.log("STATEMENT [" + sqls[i].substring(0,
                            sqls[i].length() > 60 ? 60 : sqls[i].length()) + "]... processed");
                }
            } catch (SQLException e) {
                if (tolog) {
                    XlendServer.log(e);
                }
            } finally {
                try {
                    ps.close();
                } catch (SQLException ex) {
                }
            }
        }
    }

    public static void setProps(Properties props) {
        DbConnection.props = props;
    }

    public static Properties getProps() {
        return props;
    }

    public static void closeConnection(Connection connection) throws SQLException {
//        connection.commit();
        connection.close();
        connection = null;
    }

    public static String getCurDir() {
        File curdir = new File("./");
        return curdir.getAbsolutePath();
    }

    private static Connection checkVersion(Connection connection) throws RemoteException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        String err;
        String stmt = "SELECT version_id,version FROM dbversion WHERE dbversion_id=1";
        int curversion_id = 0;
        String curversion = "0.0";
        try {
            ps = connection.prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                curversion_id = rs.getInt(1);
                curversion = rs.getString(2);
            }
            if (DB_VERSION_ID > curversion_id || !curversion.equals(DB_VERSION)) {
                err = "Invalid database version! " + "expected:" + DB_VERSION + "(" + DB_VERSION_ID + ") "
                        + "found:" + curversion + "(" + curversion_id + ")";
                XlendServer.log(err);
                throw new RemoteException(err);
            }
        } catch (SQLException ex) {
            XlendServer.log(ex);
            try {
                closeConnection(connection);
            } catch (SQLException ex1) {
            }
        } finally {
            try {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                    }
                }
            } finally {
                if (ps != null) {
                    try {
                        ps.close();
                    } catch (SQLException ex) {
                    }
                }
            }
        }
        return connection;
    }

//    public static void shutDownDatabase() {
//        Connection connection = null;
//        try {
//            connection = getConnection();
//            sqlBatch(new String[]{"sрutdown"}, connection, true);
//        } catch (RemoteException ex) {
//            XlendServer.log(ex);
//        } finally {
//            try {
//                closeConnection(connection);
//            } catch (SQLException ex1) {
//            }
//        }
//    }
    public static String[] loadDDLscript(String fname, String splitter) {
        String[] ans = new String[0];
        File sqlFile = new File(fname);
        boolean toclean = true;
        if (!sqlFile.exists()) {
            fname = "../sql/" + fname;
            sqlFile = new File(fname);
            toclean = false;
        }
        if (sqlFile.exists()) {
            StringBuffer contents = new StringBuffer();
            java.io.BufferedReader reader = null;
            try {
                reader = new java.io.BufferedReader(new FileReader(sqlFile));
                String line = null;
                int lineNum = 0;
                while ((line = reader.readLine()) != null) {
                    int cut = line.indexOf("--");
                    if (cut >= 0) {
                        line = line.substring(0, cut);
                    }
                    contents.append(line).append(System.getProperty("line.separator"));
                }
                ans = contents.toString().split(splitter);
            } catch (Exception e) {
                XlendServer.log(e);
            } finally {
                try {
                    if (reader != null) {
                        reader.close();
                    }
                } catch (IOException ie) {
                }
            }
            if (toclean) {
                sqlFile.delete();
            }
        } else {
            XlendServer.log("File " + fname + " not found");
        }
        return ans;
    }

    private static ArrayList<Integer> getAnomalies(Connection connection, String stmt) {
        PreparedStatement ps = null;
        ResultSet rs = null;
//        System.out.println("!![" + stmt + "]");
        ArrayList<Integer> anomalies = new ArrayList<Integer>();
        try {
            ps = connection.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                anomalies.add(rs.getInt(1));
            }
        } catch (SQLException ex) {
            XlendServer.log(ex);
        } finally {
            try {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                    }
                }
            } finally {
                if (ps != null) {
                    try {
                        ps.close();
                    } catch (SQLException ex) {
                    }
                }
            }
        }
        return anomalies;
    }

    private static void fixWrongAssignments(Connection connection) {
        XlendServer.log("Checking assignments...");
        String stmt = "select xemployee_id from xopmachassing "
                + "where date_end is null and not xemployee_id is null group by xemployee_id having count(*)>1";
        fixOperatorsAssignments(connection, getAnomalies(connection, stmt));
        stmt = "select xmachine_id from xopmachassing "
                + "where date_end is null and not xmachine_id is null group by xmachine_id having count(*)>1";
        fixMachineAssignments(connection, getAnomalies(connection, stmt));
        stmt = "select xemployee_id from xopmachassing o "
                + "where not exists(select * from xopmachassing "
                + " where xemployee_id=o.xemployee_id and date_end is null)"
                + "and not xemployee_id is null order by xemployee_id,xopmachassing_id";
        addCurrentAssignment(connection, getAnomalies(connection, stmt), "xemployee_id");
        stmt = "select xmachine_id from xopmachassing o "
                + "where not exists(select * from xopmachassing "
                + " where xmachine_id=o.xmachine_id and date_end is null)"
                + "and not xmachine_id is null order by xmachine_id,xopmachassing_id";
        addCurrentAssignment(connection, getAnomalies(connection, stmt), "xmachine_id");
    }

    private static void fixOperatorsAssignments(Connection connection, ArrayList<Integer> operatorAnomalies) {
        fixAssignment(connection, operatorAnomalies, "xemployee_id");
    }

    private static void fixMachineAssignments(Connection connection, ArrayList<Integer> machineAnomalies) {
        fixAssignment(connection, machineAnomalies, "xmachine_id");
    }

    private static void fixAssignment(Connection connection, ArrayList<Integer> anomalies, String fld) {
        for (Integer itemID : anomalies) {
            try {
                Xopmachassing cur = null;
                Xopmachassing next = null;
                DbObject[] assigns = Xopmachassing.load(connection, fld + "=" + itemID, "xopmachassing_id");
                for (int i = 0; i < assigns.length; i++) {
                    cur = (Xopmachassing) assigns[i];
                    if (cur.getDateEnd() == null && i < assigns.length - 1) {
                        next = (Xopmachassing) assigns[i + 1];
                        if (cur.getXmachineId() == 0) {
                            cur.setXmachineId(null);
                        }
                        if (cur.getXemployeeId() == 0) {
                            cur.setXemployeeId(null);
                        }
                        cur.setDateEnd(next.getDateStart());
                        cur.save();
                    }
                }
                if (cur.getDateEnd() != null) {
                    addAssignment(cur, fld);
                }
            } catch (Exception ex) {
                XlendServer.log(ex);
            }
        }
    }

    private static void addCurrentAssignment(Connection connection, ArrayList<Integer> anomalies, String fld) {
        for (Integer itemID : anomalies) {
            try {
                DbObject[] assigns = Xopmachassing.load(connection, fld + "=" + itemID, "xopmachassing_id desc");
                Xopmachassing cur = (Xopmachassing) assigns[0];
                addAssignment(cur, fld);
            } catch (Exception ex) {
                XlendServer.log(ex);
            }
        }
    }

    private static void addAssignment(Xopmachassing cur, String fld) throws SQLException, ForeignKeyViolationException {
        Date dt = cur.getDateEnd();
        cur.setXopmachassingId(0);
        cur.setNew(true);
        cur.setDateStart(dt);
        cur.setDateEnd(null);
        if (fld.equals("xemployee_id")) {
            cur.setXmachineId(null);
        } else if (fld.equals("xmachine_id")) {
            cur.setXemployeeId(null);
        }
        cur.save();
    }
}
