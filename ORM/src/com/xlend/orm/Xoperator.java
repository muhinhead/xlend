// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Fri Dec 02 17:45:23 EET 2011
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Xoperator extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer xoperatorId = null;
    private String firstName = null;
    private String fullName = null;
    private String lastName = null;
    private String idNum = null;
    private String clockNum = null;
    private Integer clocksheets = null;
    private Integer rate = null;
    private Integer mondayNormtm = null;
    private Integer mondayOvertm = null;
    private Integer mondayDouble = null;
    private Integer tuesdayNormtm = null;
    private Integer tuesdayOvertm = null;
    private Integer tuesdayDouble = null;
    private Integer wednesdayNormtm = null;
    private Integer wednesdayOvertm = null;
    private Integer wednesdayDouble = null;
    private Integer thursdayNormtm = null;
    private Integer thursdayOvertm = null;
    private Integer thursdayDouble = null;
    private Integer fridayNormtm = null;
    private Integer fridayOvertm = null;
    private Integer fridayDouble = null;
    private Integer saturdayOvertm = null;
    private Integer saturdayDouble = null;
    private Integer sundayOvertm = null;
    private Integer sundayDouble = null;
    private Integer totalNormtm = null;
    private Integer totalOvertm = null;
    private Integer totalDouble = null;
    private Integer xpositionId = null;
    private Object photo = null;

    public Xoperator(Connection connection) {
        super(connection, "xoperator", "xoperator_id");
        setColumnNames(new String[]{"xoperator_id", "first_name", "full_name", "last_name", "id_num", "clock_num", "clocksheets", "rate", "monday_normtm", "monday_overtm", "monday_double", "tuesday_normtm", "tuesday_overtm", "tuesday_double", "wednesday_normtm", "wednesday_overtm", "wednesday_double", "thursday_normtm", "thursday_overtm", "thursday_double", "friday_normtm", "friday_overtm", "friday_double", "saturday_overtm", "saturday_double", "sunday_overtm", "sunday_double", "total_normtm", "total_overtm", "total_double", "xposition_id", "photo"});
    }

    public Xoperator(Connection connection, Integer xoperatorId, String firstName, String fullName, String lastName, String idNum, String clockNum, Integer clocksheets, Integer rate, Integer mondayNormtm, Integer mondayOvertm, Integer mondayDouble, Integer tuesdayNormtm, Integer tuesdayOvertm, Integer tuesdayDouble, Integer wednesdayNormtm, Integer wednesdayOvertm, Integer wednesdayDouble, Integer thursdayNormtm, Integer thursdayOvertm, Integer thursdayDouble, Integer fridayNormtm, Integer fridayOvertm, Integer fridayDouble, Integer saturdayOvertm, Integer saturdayDouble, Integer sundayOvertm, Integer sundayDouble, Integer totalNormtm, Integer totalOvertm, Integer totalDouble, Integer xpositionId, Object photo) {
        super(connection, "xoperator", "xoperator_id");
        setNew(xoperatorId.intValue() <= 0);
//        if (xoperatorId.intValue() != 0) {
            this.xoperatorId = xoperatorId;
//        }
        this.firstName = firstName;
        this.fullName = fullName;
        this.lastName = lastName;
        this.idNum = idNum;
        this.clockNum = clockNum;
        this.clocksheets = clocksheets;
        this.rate = rate;
        this.mondayNormtm = mondayNormtm;
        this.mondayOvertm = mondayOvertm;
        this.mondayDouble = mondayDouble;
        this.tuesdayNormtm = tuesdayNormtm;
        this.tuesdayOvertm = tuesdayOvertm;
        this.tuesdayDouble = tuesdayDouble;
        this.wednesdayNormtm = wednesdayNormtm;
        this.wednesdayOvertm = wednesdayOvertm;
        this.wednesdayDouble = wednesdayDouble;
        this.thursdayNormtm = thursdayNormtm;
        this.thursdayOvertm = thursdayOvertm;
        this.thursdayDouble = thursdayDouble;
        this.fridayNormtm = fridayNormtm;
        this.fridayOvertm = fridayOvertm;
        this.fridayDouble = fridayDouble;
        this.saturdayOvertm = saturdayOvertm;
        this.saturdayDouble = saturdayDouble;
        this.sundayOvertm = sundayOvertm;
        this.sundayDouble = sundayDouble;
        this.totalNormtm = totalNormtm;
        this.totalOvertm = totalOvertm;
        this.totalDouble = totalDouble;
        this.xpositionId = xpositionId;
        this.photo = photo;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Xoperator xoperator = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xoperator_id,first_name,full_name,last_name,id_num,clock_num,clocksheets,rate,monday_normtm,monday_overtm,monday_double,tuesday_normtm,tuesday_overtm,tuesday_double,wednesday_normtm,wednesday_overtm,wednesday_double,thursday_normtm,thursday_overtm,thursday_double,friday_normtm,friday_overtm,friday_double,saturday_overtm,saturday_double,sunday_overtm,sunday_double,total_normtm,total_overtm,total_double,xposition_id,photo FROM xoperator WHERE xoperator_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                xoperator = new Xoperator(getConnection());
                xoperator.setXoperatorId(new Integer(rs.getInt(1)));
                xoperator.setFirstName(rs.getString(2));
                xoperator.setFullName(rs.getString(3));
                xoperator.setLastName(rs.getString(4));
                xoperator.setIdNum(rs.getString(5));
                xoperator.setClockNum(rs.getString(6));
                xoperator.setClocksheets(new Integer(rs.getInt(7)));
                xoperator.setRate(new Integer(rs.getInt(8)));
                xoperator.setMondayNormtm(new Integer(rs.getInt(9)));
                xoperator.setMondayOvertm(new Integer(rs.getInt(10)));
                xoperator.setMondayDouble(new Integer(rs.getInt(11)));
                xoperator.setTuesdayNormtm(new Integer(rs.getInt(12)));
                xoperator.setTuesdayOvertm(new Integer(rs.getInt(13)));
                xoperator.setTuesdayDouble(new Integer(rs.getInt(14)));
                xoperator.setWednesdayNormtm(new Integer(rs.getInt(15)));
                xoperator.setWednesdayOvertm(new Integer(rs.getInt(16)));
                xoperator.setWednesdayDouble(new Integer(rs.getInt(17)));
                xoperator.setThursdayNormtm(new Integer(rs.getInt(18)));
                xoperator.setThursdayOvertm(new Integer(rs.getInt(19)));
                xoperator.setThursdayDouble(new Integer(rs.getInt(20)));
                xoperator.setFridayNormtm(new Integer(rs.getInt(21)));
                xoperator.setFridayOvertm(new Integer(rs.getInt(22)));
                xoperator.setFridayDouble(new Integer(rs.getInt(23)));
                xoperator.setSaturdayOvertm(new Integer(rs.getInt(24)));
                xoperator.setSaturdayDouble(new Integer(rs.getInt(25)));
                xoperator.setSundayOvertm(new Integer(rs.getInt(26)));
                xoperator.setSundayDouble(new Integer(rs.getInt(27)));
                xoperator.setTotalNormtm(new Integer(rs.getInt(28)));
                xoperator.setTotalOvertm(new Integer(rs.getInt(29)));
                xoperator.setTotalDouble(new Integer(rs.getInt(30)));
                xoperator.setXpositionId(new Integer(rs.getInt(31)));
                xoperator.setPhoto(rs.getObject(32));
                xoperator.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return xoperator;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO xoperator ("+(getXoperatorId().intValue()!=0?"xoperator_id,":"")+"first_name,full_name,last_name,id_num,clock_num,clocksheets,rate,monday_normtm,monday_overtm,monday_double,tuesday_normtm,tuesday_overtm,tuesday_double,wednesday_normtm,wednesday_overtm,wednesday_double,thursday_normtm,thursday_overtm,thursday_double,friday_normtm,friday_overtm,friday_double,saturday_overtm,saturday_double,sunday_overtm,sunday_double,total_normtm,total_overtm,total_double,xposition_id,photo) values("+(getXoperatorId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getXoperatorId().intValue()!=0) {
                 ps.setObject(++n, getXoperatorId());
             }
             ps.setObject(++n, getFirstName());
             ps.setObject(++n, getFullName());
             ps.setObject(++n, getLastName());
             ps.setObject(++n, getIdNum());
             ps.setObject(++n, getClockNum());
             ps.setObject(++n, getClocksheets());
             ps.setObject(++n, getRate());
             ps.setObject(++n, getMondayNormtm());
             ps.setObject(++n, getMondayOvertm());
             ps.setObject(++n, getMondayDouble());
             ps.setObject(++n, getTuesdayNormtm());
             ps.setObject(++n, getTuesdayOvertm());
             ps.setObject(++n, getTuesdayDouble());
             ps.setObject(++n, getWednesdayNormtm());
             ps.setObject(++n, getWednesdayOvertm());
             ps.setObject(++n, getWednesdayDouble());
             ps.setObject(++n, getThursdayNormtm());
             ps.setObject(++n, getThursdayOvertm());
             ps.setObject(++n, getThursdayDouble());
             ps.setObject(++n, getFridayNormtm());
             ps.setObject(++n, getFridayOvertm());
             ps.setObject(++n, getFridayDouble());
             ps.setObject(++n, getSaturdayOvertm());
             ps.setObject(++n, getSaturdayDouble());
             ps.setObject(++n, getSundayOvertm());
             ps.setObject(++n, getSundayDouble());
             ps.setObject(++n, getTotalNormtm());
             ps.setObject(++n, getTotalOvertm());
             ps.setObject(++n, getTotalDouble());
             ps.setObject(++n, getXpositionId());
             ps.setObject(++n, getPhoto());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getXoperatorId().intValue()==0) {
             stmt = "SELECT max(xoperator_id) FROM xoperator";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setXoperatorId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE xoperator " +
                    "SET first_name = ?, full_name = ?, last_name = ?, id_num = ?, clock_num = ?, clocksheets = ?, rate = ?, monday_normtm = ?, monday_overtm = ?, monday_double = ?, tuesday_normtm = ?, tuesday_overtm = ?, tuesday_double = ?, wednesday_normtm = ?, wednesday_overtm = ?, wednesday_double = ?, thursday_normtm = ?, thursday_overtm = ?, thursday_double = ?, friday_normtm = ?, friday_overtm = ?, friday_double = ?, saturday_overtm = ?, saturday_double = ?, sunday_overtm = ?, sunday_double = ?, total_normtm = ?, total_overtm = ?, total_double = ?, xposition_id = ?, photo = ?" + 
                    " WHERE xoperator_id = " + getXoperatorId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getFirstName());
                ps.setObject(2, getFullName());
                ps.setObject(3, getLastName());
                ps.setObject(4, getIdNum());
                ps.setObject(5, getClockNum());
                ps.setObject(6, getClocksheets());
                ps.setObject(7, getRate());
                ps.setObject(8, getMondayNormtm());
                ps.setObject(9, getMondayOvertm());
                ps.setObject(10, getMondayDouble());
                ps.setObject(11, getTuesdayNormtm());
                ps.setObject(12, getTuesdayOvertm());
                ps.setObject(13, getTuesdayDouble());
                ps.setObject(14, getWednesdayNormtm());
                ps.setObject(15, getWednesdayOvertm());
                ps.setObject(16, getWednesdayDouble());
                ps.setObject(17, getThursdayNormtm());
                ps.setObject(18, getThursdayOvertm());
                ps.setObject(19, getThursdayDouble());
                ps.setObject(20, getFridayNormtm());
                ps.setObject(21, getFridayOvertm());
                ps.setObject(22, getFridayDouble());
                ps.setObject(23, getSaturdayOvertm());
                ps.setObject(24, getSaturdayDouble());
                ps.setObject(25, getSundayOvertm());
                ps.setObject(26, getSundayDouble());
                ps.setObject(27, getTotalNormtm());
                ps.setObject(28, getTotalOvertm());
                ps.setObject(29, getTotalDouble());
                ps.setObject(30, getXpositionId());
                ps.setObject(31, getPhoto());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from xemplcontract
            Xemplcontract[] records = (Xemplcontract[])Xemplcontract.load(getConnection(),"xoperator_id = " + getXoperatorId(),null);
            for (int i = 0; i<records.length; i++) {
                Xemplcontract xemplcontract = records[i];
                xemplcontract.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM xoperator " +
                "WHERE xoperator_id = " + getXoperatorId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setXoperatorId(new Integer(-getXoperatorId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getXoperatorId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xoperator_id,first_name,full_name,last_name,id_num,clock_num,clocksheets,rate,monday_normtm,monday_overtm,monday_double,tuesday_normtm,tuesday_overtm,tuesday_double,wednesday_normtm,wednesday_overtm,wednesday_double,thursday_normtm,thursday_overtm,thursday_double,friday_normtm,friday_overtm,friday_double,saturday_overtm,saturday_double,sunday_overtm,sunday_double,total_normtm,total_overtm,total_double,xposition_id,photo FROM xoperator " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Xoperator(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),new Integer(rs.getInt(7)),new Integer(rs.getInt(8)),new Integer(rs.getInt(9)),new Integer(rs.getInt(10)),new Integer(rs.getInt(11)),new Integer(rs.getInt(12)),new Integer(rs.getInt(13)),new Integer(rs.getInt(14)),new Integer(rs.getInt(15)),new Integer(rs.getInt(16)),new Integer(rs.getInt(17)),new Integer(rs.getInt(18)),new Integer(rs.getInt(19)),new Integer(rs.getInt(20)),new Integer(rs.getInt(21)),new Integer(rs.getInt(22)),new Integer(rs.getInt(23)),new Integer(rs.getInt(24)),new Integer(rs.getInt(25)),new Integer(rs.getInt(26)),new Integer(rs.getInt(27)),new Integer(rs.getInt(28)),new Integer(rs.getInt(29)),new Integer(rs.getInt(30)),new Integer(rs.getInt(31)),rs.getObject(32)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Xoperator[] objects = new Xoperator[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Xoperator xoperator = (Xoperator) lst.get(i);
            objects[i] = xoperator;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT xoperator_id FROM xoperator " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getXoperatorId() + getDelimiter();
    //}

    public Integer getXoperatorId() {
        return xoperatorId;
    }

    public void setXoperatorId(Integer xoperatorId) throws ForeignKeyViolationException {
        setWasChanged(this.xoperatorId != null && this.xoperatorId != xoperatorId);
        this.xoperatorId = xoperatorId;
        setNew(xoperatorId.intValue() == 0);
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.firstName != null && !this.firstName.equals(firstName));
        this.firstName = firstName;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.fullName != null && !this.fullName.equals(fullName));
        this.fullName = fullName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.lastName != null && !this.lastName.equals(lastName));
        this.lastName = lastName;
    }

    public String getIdNum() {
        return idNum;
    }

    public void setIdNum(String idNum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.idNum != null && !this.idNum.equals(idNum));
        this.idNum = idNum;
    }

    public String getClockNum() {
        return clockNum;
    }

    public void setClockNum(String clockNum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.clockNum != null && !this.clockNum.equals(clockNum));
        this.clockNum = clockNum;
    }

    public Integer getClocksheets() {
        return clocksheets;
    }

    public void setClocksheets(Integer clocksheets) throws SQLException, ForeignKeyViolationException {
        if (null != clocksheets)
            clocksheets = clocksheets == 0 ? null : clocksheets;
        setWasChanged(this.clocksheets != null && !this.clocksheets.equals(clocksheets));
        this.clocksheets = clocksheets;
    }

    public Integer getRate() {
        return rate;
    }

    public void setRate(Integer rate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.rate != null && !this.rate.equals(rate));
        this.rate = rate;
    }

    public Integer getMondayNormtm() {
        return mondayNormtm;
    }

    public void setMondayNormtm(Integer mondayNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != mondayNormtm)
            mondayNormtm = mondayNormtm == 0 ? null : mondayNormtm;
        setWasChanged(this.mondayNormtm != null && !this.mondayNormtm.equals(mondayNormtm));
        this.mondayNormtm = mondayNormtm;
    }

    public Integer getMondayOvertm() {
        return mondayOvertm;
    }

    public void setMondayOvertm(Integer mondayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != mondayOvertm)
            mondayOvertm = mondayOvertm == 0 ? null : mondayOvertm;
        setWasChanged(this.mondayOvertm != null && !this.mondayOvertm.equals(mondayOvertm));
        this.mondayOvertm = mondayOvertm;
    }

    public Integer getMondayDouble() {
        return mondayDouble;
    }

    public void setMondayDouble(Integer mondayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != mondayDouble)
            mondayDouble = mondayDouble == 0 ? null : mondayDouble;
        setWasChanged(this.mondayDouble != null && !this.mondayDouble.equals(mondayDouble));
        this.mondayDouble = mondayDouble;
    }

    public Integer getTuesdayNormtm() {
        return tuesdayNormtm;
    }

    public void setTuesdayNormtm(Integer tuesdayNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != tuesdayNormtm)
            tuesdayNormtm = tuesdayNormtm == 0 ? null : tuesdayNormtm;
        setWasChanged(this.tuesdayNormtm != null && !this.tuesdayNormtm.equals(tuesdayNormtm));
        this.tuesdayNormtm = tuesdayNormtm;
    }

    public Integer getTuesdayOvertm() {
        return tuesdayOvertm;
    }

    public void setTuesdayOvertm(Integer tuesdayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != tuesdayOvertm)
            tuesdayOvertm = tuesdayOvertm == 0 ? null : tuesdayOvertm;
        setWasChanged(this.tuesdayOvertm != null && !this.tuesdayOvertm.equals(tuesdayOvertm));
        this.tuesdayOvertm = tuesdayOvertm;
    }

    public Integer getTuesdayDouble() {
        return tuesdayDouble;
    }

    public void setTuesdayDouble(Integer tuesdayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != tuesdayDouble)
            tuesdayDouble = tuesdayDouble == 0 ? null : tuesdayDouble;
        setWasChanged(this.tuesdayDouble != null && !this.tuesdayDouble.equals(tuesdayDouble));
        this.tuesdayDouble = tuesdayDouble;
    }

    public Integer getWednesdayNormtm() {
        return wednesdayNormtm;
    }

    public void setWednesdayNormtm(Integer wednesdayNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != wednesdayNormtm)
            wednesdayNormtm = wednesdayNormtm == 0 ? null : wednesdayNormtm;
        setWasChanged(this.wednesdayNormtm != null && !this.wednesdayNormtm.equals(wednesdayNormtm));
        this.wednesdayNormtm = wednesdayNormtm;
    }

    public Integer getWednesdayOvertm() {
        return wednesdayOvertm;
    }

    public void setWednesdayOvertm(Integer wednesdayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != wednesdayOvertm)
            wednesdayOvertm = wednesdayOvertm == 0 ? null : wednesdayOvertm;
        setWasChanged(this.wednesdayOvertm != null && !this.wednesdayOvertm.equals(wednesdayOvertm));
        this.wednesdayOvertm = wednesdayOvertm;
    }

    public Integer getWednesdayDouble() {
        return wednesdayDouble;
    }

    public void setWednesdayDouble(Integer wednesdayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != wednesdayDouble)
            wednesdayDouble = wednesdayDouble == 0 ? null : wednesdayDouble;
        setWasChanged(this.wednesdayDouble != null && !this.wednesdayDouble.equals(wednesdayDouble));
        this.wednesdayDouble = wednesdayDouble;
    }

    public Integer getThursdayNormtm() {
        return thursdayNormtm;
    }

    public void setThursdayNormtm(Integer thursdayNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != thursdayNormtm)
            thursdayNormtm = thursdayNormtm == 0 ? null : thursdayNormtm;
        setWasChanged(this.thursdayNormtm != null && !this.thursdayNormtm.equals(thursdayNormtm));
        this.thursdayNormtm = thursdayNormtm;
    }

    public Integer getThursdayOvertm() {
        return thursdayOvertm;
    }

    public void setThursdayOvertm(Integer thursdayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != thursdayOvertm)
            thursdayOvertm = thursdayOvertm == 0 ? null : thursdayOvertm;
        setWasChanged(this.thursdayOvertm != null && !this.thursdayOvertm.equals(thursdayOvertm));
        this.thursdayOvertm = thursdayOvertm;
    }

    public Integer getThursdayDouble() {
        return thursdayDouble;
    }

    public void setThursdayDouble(Integer thursdayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != thursdayDouble)
            thursdayDouble = thursdayDouble == 0 ? null : thursdayDouble;
        setWasChanged(this.thursdayDouble != null && !this.thursdayDouble.equals(thursdayDouble));
        this.thursdayDouble = thursdayDouble;
    }

    public Integer getFridayNormtm() {
        return fridayNormtm;
    }

    public void setFridayNormtm(Integer fridayNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != fridayNormtm)
            fridayNormtm = fridayNormtm == 0 ? null : fridayNormtm;
        setWasChanged(this.fridayNormtm != null && !this.fridayNormtm.equals(fridayNormtm));
        this.fridayNormtm = fridayNormtm;
    }

    public Integer getFridayOvertm() {
        return fridayOvertm;
    }

    public void setFridayOvertm(Integer fridayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != fridayOvertm)
            fridayOvertm = fridayOvertm == 0 ? null : fridayOvertm;
        setWasChanged(this.fridayOvertm != null && !this.fridayOvertm.equals(fridayOvertm));
        this.fridayOvertm = fridayOvertm;
    }

    public Integer getFridayDouble() {
        return fridayDouble;
    }

    public void setFridayDouble(Integer fridayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != fridayDouble)
            fridayDouble = fridayDouble == 0 ? null : fridayDouble;
        setWasChanged(this.fridayDouble != null && !this.fridayDouble.equals(fridayDouble));
        this.fridayDouble = fridayDouble;
    }

    public Integer getSaturdayOvertm() {
        return saturdayOvertm;
    }

    public void setSaturdayOvertm(Integer saturdayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != saturdayOvertm)
            saturdayOvertm = saturdayOvertm == 0 ? null : saturdayOvertm;
        setWasChanged(this.saturdayOvertm != null && !this.saturdayOvertm.equals(saturdayOvertm));
        this.saturdayOvertm = saturdayOvertm;
    }

    public Integer getSaturdayDouble() {
        return saturdayDouble;
    }

    public void setSaturdayDouble(Integer saturdayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != saturdayDouble)
            saturdayDouble = saturdayDouble == 0 ? null : saturdayDouble;
        setWasChanged(this.saturdayDouble != null && !this.saturdayDouble.equals(saturdayDouble));
        this.saturdayDouble = saturdayDouble;
    }

    public Integer getSundayOvertm() {
        return sundayOvertm;
    }

    public void setSundayOvertm(Integer sundayOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != sundayOvertm)
            sundayOvertm = sundayOvertm == 0 ? null : sundayOvertm;
        setWasChanged(this.sundayOvertm != null && !this.sundayOvertm.equals(sundayOvertm));
        this.sundayOvertm = sundayOvertm;
    }

    public Integer getSundayDouble() {
        return sundayDouble;
    }

    public void setSundayDouble(Integer sundayDouble) throws SQLException, ForeignKeyViolationException {
        if (null != sundayDouble)
            sundayDouble = sundayDouble == 0 ? null : sundayDouble;
        setWasChanged(this.sundayDouble != null && !this.sundayDouble.equals(sundayDouble));
        this.sundayDouble = sundayDouble;
    }

    public Integer getTotalNormtm() {
        return totalNormtm;
    }

    public void setTotalNormtm(Integer totalNormtm) throws SQLException, ForeignKeyViolationException {
        if (null != totalNormtm)
            totalNormtm = totalNormtm == 0 ? null : totalNormtm;
        setWasChanged(this.totalNormtm != null && !this.totalNormtm.equals(totalNormtm));
        this.totalNormtm = totalNormtm;
    }

    public Integer getTotalOvertm() {
        return totalOvertm;
    }

    public void setTotalOvertm(Integer totalOvertm) throws SQLException, ForeignKeyViolationException {
        if (null != totalOvertm)
            totalOvertm = totalOvertm == 0 ? null : totalOvertm;
        setWasChanged(this.totalOvertm != null && !this.totalOvertm.equals(totalOvertm));
        this.totalOvertm = totalOvertm;
    }

    public Integer getTotalDouble() {
        return totalDouble;
    }

    public void setTotalDouble(Integer totalDouble) throws SQLException, ForeignKeyViolationException {
        if (null != totalDouble)
            totalDouble = totalDouble == 0 ? null : totalDouble;
        setWasChanged(this.totalDouble != null && !this.totalDouble.equals(totalDouble));
        this.totalDouble = totalDouble;
    }

    public Integer getXpositionId() {
        return xpositionId;
    }

    public void setXpositionId(Integer xpositionId) throws SQLException, ForeignKeyViolationException {
        if (null != xpositionId)
            xpositionId = xpositionId == 0 ? null : xpositionId;
        if (xpositionId!=null && !Xposition.exists(getConnection(),"xposition_id = " + xpositionId)) {
            throw new ForeignKeyViolationException("Can't set xposition_id, foreign key violation: xoperator_xposition_fk");
        }
        setWasChanged(this.xpositionId != null && !this.xpositionId.equals(xpositionId));
        this.xpositionId = xpositionId;
    }

    public Object getPhoto() {
        return photo;
    }

    public void setPhoto(Object photo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.photo != null && !this.photo.equals(photo));
        this.photo = photo;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[32];
        columnValues[0] = getXoperatorId();
        columnValues[1] = getFirstName();
        columnValues[2] = getFullName();
        columnValues[3] = getLastName();
        columnValues[4] = getIdNum();
        columnValues[5] = getClockNum();
        columnValues[6] = getClocksheets();
        columnValues[7] = getRate();
        columnValues[8] = getMondayNormtm();
        columnValues[9] = getMondayOvertm();
        columnValues[10] = getMondayDouble();
        columnValues[11] = getTuesdayNormtm();
        columnValues[12] = getTuesdayOvertm();
        columnValues[13] = getTuesdayDouble();
        columnValues[14] = getWednesdayNormtm();
        columnValues[15] = getWednesdayOvertm();
        columnValues[16] = getWednesdayDouble();
        columnValues[17] = getThursdayNormtm();
        columnValues[18] = getThursdayOvertm();
        columnValues[19] = getThursdayDouble();
        columnValues[20] = getFridayNormtm();
        columnValues[21] = getFridayOvertm();
        columnValues[22] = getFridayDouble();
        columnValues[23] = getSaturdayOvertm();
        columnValues[24] = getSaturdayDouble();
        columnValues[25] = getSundayOvertm();
        columnValues[26] = getSundayDouble();
        columnValues[27] = getTotalNormtm();
        columnValues[28] = getTotalOvertm();
        columnValues[29] = getTotalDouble();
        columnValues[30] = getXpositionId();
        columnValues[31] = getPhoto();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setXoperatorId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setXoperatorId(null);
        }
        setFirstName(flds[1]);
        setFullName(flds[2]);
        setLastName(flds[3]);
        setIdNum(flds[4]);
        setClockNum(flds[5]);
        try {
            setClocksheets(Integer.parseInt(flds[6]));
        } catch(NumberFormatException ne) {
            setClocksheets(null);
        }
        try {
            setRate(Integer.parseInt(flds[7]));
        } catch(NumberFormatException ne) {
            setRate(null);
        }
        try {
            setMondayNormtm(Integer.parseInt(flds[8]));
        } catch(NumberFormatException ne) {
            setMondayNormtm(null);
        }
        try {
            setMondayOvertm(Integer.parseInt(flds[9]));
        } catch(NumberFormatException ne) {
            setMondayOvertm(null);
        }
        try {
            setMondayDouble(Integer.parseInt(flds[10]));
        } catch(NumberFormatException ne) {
            setMondayDouble(null);
        }
        try {
            setTuesdayNormtm(Integer.parseInt(flds[11]));
        } catch(NumberFormatException ne) {
            setTuesdayNormtm(null);
        }
        try {
            setTuesdayOvertm(Integer.parseInt(flds[12]));
        } catch(NumberFormatException ne) {
            setTuesdayOvertm(null);
        }
        try {
            setTuesdayDouble(Integer.parseInt(flds[13]));
        } catch(NumberFormatException ne) {
            setTuesdayDouble(null);
        }
        try {
            setWednesdayNormtm(Integer.parseInt(flds[14]));
        } catch(NumberFormatException ne) {
            setWednesdayNormtm(null);
        }
        try {
            setWednesdayOvertm(Integer.parseInt(flds[15]));
        } catch(NumberFormatException ne) {
            setWednesdayOvertm(null);
        }
        try {
            setWednesdayDouble(Integer.parseInt(flds[16]));
        } catch(NumberFormatException ne) {
            setWednesdayDouble(null);
        }
        try {
            setThursdayNormtm(Integer.parseInt(flds[17]));
        } catch(NumberFormatException ne) {
            setThursdayNormtm(null);
        }
        try {
            setThursdayOvertm(Integer.parseInt(flds[18]));
        } catch(NumberFormatException ne) {
            setThursdayOvertm(null);
        }
        try {
            setThursdayDouble(Integer.parseInt(flds[19]));
        } catch(NumberFormatException ne) {
            setThursdayDouble(null);
        }
        try {
            setFridayNormtm(Integer.parseInt(flds[20]));
        } catch(NumberFormatException ne) {
            setFridayNormtm(null);
        }
        try {
            setFridayOvertm(Integer.parseInt(flds[21]));
        } catch(NumberFormatException ne) {
            setFridayOvertm(null);
        }
        try {
            setFridayDouble(Integer.parseInt(flds[22]));
        } catch(NumberFormatException ne) {
            setFridayDouble(null);
        }
        try {
            setSaturdayOvertm(Integer.parseInt(flds[23]));
        } catch(NumberFormatException ne) {
            setSaturdayOvertm(null);
        }
        try {
            setSaturdayDouble(Integer.parseInt(flds[24]));
        } catch(NumberFormatException ne) {
            setSaturdayDouble(null);
        }
        try {
            setSundayOvertm(Integer.parseInt(flds[25]));
        } catch(NumberFormatException ne) {
            setSundayOvertm(null);
        }
        try {
            setSundayDouble(Integer.parseInt(flds[26]));
        } catch(NumberFormatException ne) {
            setSundayDouble(null);
        }
        try {
            setTotalNormtm(Integer.parseInt(flds[27]));
        } catch(NumberFormatException ne) {
            setTotalNormtm(null);
        }
        try {
            setTotalOvertm(Integer.parseInt(flds[28]));
        } catch(NumberFormatException ne) {
            setTotalOvertm(null);
        }
        try {
            setTotalDouble(Integer.parseInt(flds[29]));
        } catch(NumberFormatException ne) {
            setTotalDouble(null);
        }
        try {
            setXpositionId(Integer.parseInt(flds[30]));
        } catch(NumberFormatException ne) {
            setXpositionId(null);
        }
        setPhoto(flds[31]);
    }
}
